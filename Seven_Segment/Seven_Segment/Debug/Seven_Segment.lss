
Seven_Segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000386  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003da  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000040c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000808  00000000  00000000  000004a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000669  00000000  00000000  00000ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004b1  00000000  00000000  00001311  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  000017c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a4  00000000  00000000  0000185c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000024d  00000000  00000000  00001c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001e4d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	91 00       	.word	0x0091	; ????
  56:	9e 00       	.word	0x009e	; ????
  58:	ab 00       	.word	0x00ab	; ????
  5a:	b8 00       	.word	0x00b8	; ????
  5c:	c5 00       	.word	0x00c5	; ????
  5e:	d2 00       	.word	0x00d2	; ????
  60:	df 00       	.word	0x00df	; ????
  62:	ec 00       	.word	0x00ec	; ????
  64:	f9 00       	.word	0x00f9	; ????
  66:	06 01       	movw	r0, r12

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf e5       	ldi	r28, 0x5F	; 95
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 c1 01 	jmp	0x382	; 0x382 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include "SVN_Segment.h"


int main(void)
{
	SVN_Init();
  80:	0e 94 47 00 	call	0x8e	; 0x8e <SVN_Init>
    /* Replace with your application code */
    while (1) 
    {
		Display_Number(9329);
  84:	81 e7       	ldi	r24, 0x71	; 113
  86:	94 e2       	ldi	r25, 0x24	; 36
  88:	0e 94 19 01 	call	0x232	; 0x232 <Display_Number>
  8c:	fb cf       	rjmp	.-10     	; 0x84 <main+0x4>

0000008e <SVN_Init>:

//static const uint8 SVN_Numbers[10] = {0x00,0x01,0x02,0x03,0x04,0x05,0x05,0x06,0x06,0x07,0x08,0x09};
	
void SVN_Init(void)
{
	SET_Bit(DIO_PORTB->DDR,0);
  8e:	87 b3       	in	r24, 0x17	; 23
  90:	81 60       	ori	r24, 0x01	; 1
  92:	87 bb       	out	0x17, r24	; 23
	SET_Bit(DIO_PORTB->DDR,1);
  94:	87 b3       	in	r24, 0x17	; 23
  96:	82 60       	ori	r24, 0x02	; 2
  98:	87 bb       	out	0x17, r24	; 23
	SET_Bit(DIO_PORTB->DDR,2);
  9a:	87 b3       	in	r24, 0x17	; 23
  9c:	84 60       	ori	r24, 0x04	; 4
  9e:	87 bb       	out	0x17, r24	; 23
	SET_Bit(DIO_PORTB->DDR,4);
  a0:	87 b3       	in	r24, 0x17	; 23
  a2:	80 61       	ori	r24, 0x10	; 16
  a4:	87 bb       	out	0x17, r24	; 23
	
	// Set digit PORTs of Digits as output.
	SET_Bit(DIO_PORTA->DDR,2);
  a6:	8a b3       	in	r24, 0x1a	; 26
  a8:	84 60       	ori	r24, 0x04	; 4
  aa:	8a bb       	out	0x1a, r24	; 26
	SET_Bit(DIO_PORTA->DDR,3);
  ac:	8a b3       	in	r24, 0x1a	; 26
  ae:	88 60       	ori	r24, 0x08	; 8
  b0:	8a bb       	out	0x1a, r24	; 26
	SET_Bit(DIO_PORTB->DDR,5);
  b2:	87 b3       	in	r24, 0x17	; 23
  b4:	80 62       	ori	r24, 0x20	; 32
  b6:	87 bb       	out	0x17, r24	; 23
	SET_Bit(DIO_PORTB->DDR,6);
  b8:	87 b3       	in	r24, 0x17	; 23
  ba:	80 64       	ori	r24, 0x40	; 64
  bc:	87 bb       	out	0x17, r24	; 23
  be:	08 95       	ret

000000c0 <Select_Digit>:
}

void Select_Digit(uint8 num)
{
	SET_Bit(DIO_PORTA->PORT,2);
  c0:	9b b3       	in	r25, 0x1b	; 27
  c2:	94 60       	ori	r25, 0x04	; 4
  c4:	9b bb       	out	0x1b, r25	; 27
	SET_Bit(DIO_PORTA->PORT,3);
  c6:	9b b3       	in	r25, 0x1b	; 27
  c8:	98 60       	ori	r25, 0x08	; 8
  ca:	9b bb       	out	0x1b, r25	; 27
	SET_Bit(DIO_PORTB->PORT,5);
  cc:	98 b3       	in	r25, 0x18	; 24
  ce:	90 62       	ori	r25, 0x20	; 32
  d0:	98 bb       	out	0x18, r25	; 24
	SET_Bit(DIO_PORTB->PORT,6);
  d2:	98 b3       	in	r25, 0x18	; 24
  d4:	90 64       	ori	r25, 0x40	; 64
  d6:	98 bb       	out	0x18, r25	; 24

	switch (num)
  d8:	82 30       	cpi	r24, 0x02	; 2
  da:	69 f0       	breq	.+26     	; 0xf6 <Select_Digit+0x36>
  dc:	18 f4       	brcc	.+6      	; 0xe4 <Select_Digit+0x24>
  de:	81 30       	cpi	r24, 0x01	; 1
  e0:	31 f0       	breq	.+12     	; 0xee <Select_Digit+0x2e>
  e2:	08 95       	ret
  e4:	83 30       	cpi	r24, 0x03	; 3
  e6:	59 f0       	breq	.+22     	; 0xfe <Select_Digit+0x3e>
  e8:	84 30       	cpi	r24, 0x04	; 4
  ea:	69 f0       	breq	.+26     	; 0x106 <Select_Digit+0x46>
  ec:	08 95       	ret
	{
		case 1:
		CLR_Bit(DIO_PORTA->PORT,3);
  ee:	8b b3       	in	r24, 0x1b	; 27
  f0:	87 7f       	andi	r24, 0xF7	; 247
  f2:	8b bb       	out	0x1b, r24	; 27
		break;
  f4:	08 95       	ret
		case 2:
		CLR_Bit(DIO_PORTA->PORT,2);
  f6:	8b b3       	in	r24, 0x1b	; 27
  f8:	8b 7f       	andi	r24, 0xFB	; 251
  fa:	8b bb       	out	0x1b, r24	; 27
		break;
  fc:	08 95       	ret
		case 3:
		CLR_Bit(DIO_PORTB->PORT,5);
  fe:	88 b3       	in	r24, 0x18	; 24
 100:	8f 7d       	andi	r24, 0xDF	; 223
 102:	88 bb       	out	0x18, r24	; 24
		break;
 104:	08 95       	ret
		case 4:
		CLR_Bit(DIO_PORTB->PORT,6);
 106:	88 b3       	in	r24, 0x18	; 24
 108:	8f 7b       	andi	r24, 0xBF	; 191
 10a:	88 bb       	out	0x18, r24	; 24
 10c:	08 95       	ret

0000010e <Display_Digit>:
}

void Display_Digit(uint8 num)
{
	//DIO_PORTB->PORT = SVN_Numbers[num];
	switch(num)
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	8a 30       	cpi	r24, 0x0A	; 10
 112:	91 05       	cpc	r25, r1
 114:	08 f0       	brcs	.+2      	; 0x118 <Display_Digit+0xa>
 116:	86 c0       	rjmp	.+268    	; 0x224 <Display_Digit+0x116>
 118:	fc 01       	movw	r30, r24
 11a:	e6 5d       	subi	r30, 0xD6	; 214
 11c:	ff 4f       	sbci	r31, 0xFF	; 255
 11e:	0c 94 ac 01 	jmp	0x358	; 0x358 <__tablejump2__>
	{
		case 0:
		CLR_Bit(DIO_PORTB->PORT,0);//0000 0000 : 0x00
 122:	88 b3       	in	r24, 0x18	; 24
 124:	8e 7f       	andi	r24, 0xFE	; 254
 126:	88 bb       	out	0x18, r24	; 24
		CLR_Bit(DIO_PORTB->PORT,1);
 128:	88 b3       	in	r24, 0x18	; 24
 12a:	8d 7f       	andi	r24, 0xFD	; 253
 12c:	88 bb       	out	0x18, r24	; 24
		CLR_Bit(DIO_PORTB->PORT,2);
 12e:	88 b3       	in	r24, 0x18	; 24
 130:	8b 7f       	andi	r24, 0xFB	; 251
 132:	88 bb       	out	0x18, r24	; 24
		CLR_Bit(DIO_PORTB->PORT,4);
 134:	88 b3       	in	r24, 0x18	; 24
 136:	8f 7e       	andi	r24, 0xEF	; 239
 138:	88 bb       	out	0x18, r24	; 24
		break;
 13a:	74 c0       	rjmp	.+232    	; 0x224 <Display_Digit+0x116>
		case 1:
		SET_Bit(DIO_PORTB->PORT,0);//0000 0001 : 0x01
 13c:	88 b3       	in	r24, 0x18	; 24
 13e:	81 60       	ori	r24, 0x01	; 1
 140:	88 bb       	out	0x18, r24	; 24
		CLR_Bit(DIO_PORTB->PORT,1);
 142:	88 b3       	in	r24, 0x18	; 24
 144:	8d 7f       	andi	r24, 0xFD	; 253
 146:	88 bb       	out	0x18, r24	; 24
		CLR_Bit(DIO_PORTB->PORT,2);
 148:	88 b3       	in	r24, 0x18	; 24
 14a:	8b 7f       	andi	r24, 0xFB	; 251
 14c:	88 bb       	out	0x18, r24	; 24
		CLR_Bit(DIO_PORTB->PORT,4);
 14e:	88 b3       	in	r24, 0x18	; 24
 150:	8f 7e       	andi	r24, 0xEF	; 239
 152:	88 bb       	out	0x18, r24	; 24
		break;
 154:	67 c0       	rjmp	.+206    	; 0x224 <Display_Digit+0x116>
		case 2:
		CLR_Bit(DIO_PORTB->PORT,0);//0000 0010 : 0x02
 156:	88 b3       	in	r24, 0x18	; 24
 158:	8e 7f       	andi	r24, 0xFE	; 254
 15a:	88 bb       	out	0x18, r24	; 24
		SET_Bit(DIO_PORTB->PORT,1);
 15c:	88 b3       	in	r24, 0x18	; 24
 15e:	82 60       	ori	r24, 0x02	; 2
 160:	88 bb       	out	0x18, r24	; 24
		CLR_Bit(DIO_PORTB->PORT,2);
 162:	88 b3       	in	r24, 0x18	; 24
 164:	8b 7f       	andi	r24, 0xFB	; 251
 166:	88 bb       	out	0x18, r24	; 24
		CLR_Bit(DIO_PORTB->PORT,4);
 168:	88 b3       	in	r24, 0x18	; 24
 16a:	8f 7e       	andi	r24, 0xEF	; 239
 16c:	88 bb       	out	0x18, r24	; 24
		break;
 16e:	5a c0       	rjmp	.+180    	; 0x224 <Display_Digit+0x116>
		case 3:
		SET_Bit(DIO_PORTB->PORT,0);//0000 0011 : 0x03
 170:	88 b3       	in	r24, 0x18	; 24
 172:	81 60       	ori	r24, 0x01	; 1
 174:	88 bb       	out	0x18, r24	; 24
		SET_Bit(DIO_PORTB->PORT,1);
 176:	88 b3       	in	r24, 0x18	; 24
 178:	82 60       	ori	r24, 0x02	; 2
 17a:	88 bb       	out	0x18, r24	; 24
		CLR_Bit(DIO_PORTB->PORT,2);
 17c:	88 b3       	in	r24, 0x18	; 24
 17e:	8b 7f       	andi	r24, 0xFB	; 251
 180:	88 bb       	out	0x18, r24	; 24
		CLR_Bit(DIO_PORTB->PORT,4);
 182:	88 b3       	in	r24, 0x18	; 24
 184:	8f 7e       	andi	r24, 0xEF	; 239
 186:	88 bb       	out	0x18, r24	; 24
		break;
 188:	4d c0       	rjmp	.+154    	; 0x224 <Display_Digit+0x116>
		case 4:
		CLR_Bit(DIO_PORTB->PORT,0);//0000 0100 : 0x04
 18a:	88 b3       	in	r24, 0x18	; 24
 18c:	8e 7f       	andi	r24, 0xFE	; 254
 18e:	88 bb       	out	0x18, r24	; 24
		CLR_Bit(DIO_PORTB->PORT,1);
 190:	88 b3       	in	r24, 0x18	; 24
 192:	8d 7f       	andi	r24, 0xFD	; 253
 194:	88 bb       	out	0x18, r24	; 24
		SET_Bit(DIO_PORTB->PORT,2);
 196:	88 b3       	in	r24, 0x18	; 24
 198:	84 60       	ori	r24, 0x04	; 4
 19a:	88 bb       	out	0x18, r24	; 24
		CLR_Bit(DIO_PORTB->PORT,4);
 19c:	88 b3       	in	r24, 0x18	; 24
 19e:	8f 7e       	andi	r24, 0xEF	; 239
 1a0:	88 bb       	out	0x18, r24	; 24
		break;
 1a2:	40 c0       	rjmp	.+128    	; 0x224 <Display_Digit+0x116>
		case 5:
		SET_Bit(DIO_PORTB->PORT,0);//0000 0101 : 0x05
 1a4:	88 b3       	in	r24, 0x18	; 24
 1a6:	81 60       	ori	r24, 0x01	; 1
 1a8:	88 bb       	out	0x18, r24	; 24
		CLR_Bit(DIO_PORTB->PORT,1);
 1aa:	88 b3       	in	r24, 0x18	; 24
 1ac:	8d 7f       	andi	r24, 0xFD	; 253
 1ae:	88 bb       	out	0x18, r24	; 24
		SET_Bit(DIO_PORTB->PORT,2);
 1b0:	88 b3       	in	r24, 0x18	; 24
 1b2:	84 60       	ori	r24, 0x04	; 4
 1b4:	88 bb       	out	0x18, r24	; 24
		CLR_Bit(DIO_PORTB->PORT,4);
 1b6:	88 b3       	in	r24, 0x18	; 24
 1b8:	8f 7e       	andi	r24, 0xEF	; 239
 1ba:	88 bb       	out	0x18, r24	; 24
		break;
 1bc:	33 c0       	rjmp	.+102    	; 0x224 <Display_Digit+0x116>
		case 6:
		CLR_Bit(DIO_PORTB->PORT,0);//0000 0110 : 0x06
 1be:	88 b3       	in	r24, 0x18	; 24
 1c0:	8e 7f       	andi	r24, 0xFE	; 254
 1c2:	88 bb       	out	0x18, r24	; 24
		SET_Bit(DIO_PORTB->PORT,1);
 1c4:	88 b3       	in	r24, 0x18	; 24
 1c6:	82 60       	ori	r24, 0x02	; 2
 1c8:	88 bb       	out	0x18, r24	; 24
		SET_Bit(DIO_PORTB->PORT,2);
 1ca:	88 b3       	in	r24, 0x18	; 24
 1cc:	84 60       	ori	r24, 0x04	; 4
 1ce:	88 bb       	out	0x18, r24	; 24
		CLR_Bit(DIO_PORTB->PORT,4);
 1d0:	88 b3       	in	r24, 0x18	; 24
 1d2:	8f 7e       	andi	r24, 0xEF	; 239
 1d4:	88 bb       	out	0x18, r24	; 24
		break;
 1d6:	26 c0       	rjmp	.+76     	; 0x224 <Display_Digit+0x116>
		case 7:
		SET_Bit(DIO_PORTB->PORT,0);//0000 0111 : 0x07
 1d8:	88 b3       	in	r24, 0x18	; 24
 1da:	81 60       	ori	r24, 0x01	; 1
 1dc:	88 bb       	out	0x18, r24	; 24
		SET_Bit(DIO_PORTB->PORT,1);
 1de:	88 b3       	in	r24, 0x18	; 24
 1e0:	82 60       	ori	r24, 0x02	; 2
 1e2:	88 bb       	out	0x18, r24	; 24
		SET_Bit(DIO_PORTB->PORT,2);
 1e4:	88 b3       	in	r24, 0x18	; 24
 1e6:	84 60       	ori	r24, 0x04	; 4
 1e8:	88 bb       	out	0x18, r24	; 24
		CLR_Bit(DIO_PORTB->PORT,4);
 1ea:	88 b3       	in	r24, 0x18	; 24
 1ec:	8f 7e       	andi	r24, 0xEF	; 239
 1ee:	88 bb       	out	0x18, r24	; 24
		break;
 1f0:	19 c0       	rjmp	.+50     	; 0x224 <Display_Digit+0x116>
		case 8:
		CLR_Bit(DIO_PORTB->PORT,0);//0000 1000 : 0x08
 1f2:	88 b3       	in	r24, 0x18	; 24
 1f4:	8e 7f       	andi	r24, 0xFE	; 254
 1f6:	88 bb       	out	0x18, r24	; 24
		CLR_Bit(DIO_PORTB->PORT,1);
 1f8:	88 b3       	in	r24, 0x18	; 24
 1fa:	8d 7f       	andi	r24, 0xFD	; 253
 1fc:	88 bb       	out	0x18, r24	; 24
		CLR_Bit(DIO_PORTB->PORT,2);
 1fe:	88 b3       	in	r24, 0x18	; 24
 200:	8b 7f       	andi	r24, 0xFB	; 251
 202:	88 bb       	out	0x18, r24	; 24
		SET_Bit(DIO_PORTB->PORT,4);
 204:	88 b3       	in	r24, 0x18	; 24
 206:	80 61       	ori	r24, 0x10	; 16
 208:	88 bb       	out	0x18, r24	; 24
		break;
 20a:	0c c0       	rjmp	.+24     	; 0x224 <Display_Digit+0x116>
		case 9:
		SET_Bit(DIO_PORTB->PORT,0);//0000 1001 : 0x09
 20c:	88 b3       	in	r24, 0x18	; 24
 20e:	81 60       	ori	r24, 0x01	; 1
 210:	88 bb       	out	0x18, r24	; 24
		CLR_Bit(DIO_PORTB->PORT,1);
 212:	88 b3       	in	r24, 0x18	; 24
 214:	8d 7f       	andi	r24, 0xFD	; 253
 216:	88 bb       	out	0x18, r24	; 24
		CLR_Bit(DIO_PORTB->PORT,2);
 218:	88 b3       	in	r24, 0x18	; 24
 21a:	8b 7f       	andi	r24, 0xFB	; 251
 21c:	88 bb       	out	0x18, r24	; 24
		SET_Bit(DIO_PORTB->PORT,4);
 21e:	88 b3       	in	r24, 0x18	; 24
 220:	80 61       	ori	r24, 0x10	; 16
 222:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 224:	8f e9       	ldi	r24, 0x9F	; 159
 226:	9f e0       	ldi	r25, 0x0F	; 15
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <Display_Digit+0x11a>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <Display_Digit+0x120>
 22e:	00 00       	nop
 230:	08 95       	ret

00000232 <Display_Number>:
	}
	_delay_ms(1);
}

void Display_Number(uint16 num)
{
 232:	ef 92       	push	r14
 234:	ff 92       	push	r15
 236:	0f 93       	push	r16
 238:	1f 93       	push	r17
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
	if (num/10000 == 0)
 23e:	80 31       	cpi	r24, 0x10	; 16
 240:	27 e2       	ldi	r18, 0x27	; 39
 242:	92 07       	cpc	r25, r18
 244:	08 f0       	brcs	.+2      	; 0x248 <Display_Number+0x16>
 246:	81 c0       	rjmp	.+258    	; 0x34a <Display_Number+0x118>
 248:	ec 01       	movw	r28, r24
	{
		//SVN_Init();
		
		Select_Digit(1);
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	0e 94 60 00 	call	0xc0	; 0xc0 <Select_Digit>
		Display_Digit((num%100)%10);
 250:	7e 01       	movw	r14, r28
 252:	f6 94       	lsr	r15
 254:	e7 94       	ror	r14
 256:	f6 94       	lsr	r15
 258:	e7 94       	ror	r14
 25a:	97 01       	movw	r18, r14
 25c:	ab e7       	ldi	r26, 0x7B	; 123
 25e:	b4 e1       	ldi	r27, 0x14	; 20
 260:	0e 94 b2 01 	call	0x364	; 0x364 <__umulhisi3>
 264:	8c 01       	movw	r16, r24
 266:	16 95       	lsr	r17
 268:	07 95       	ror	r16
 26a:	24 e6       	ldi	r18, 0x64	; 100
 26c:	20 9f       	mul	r18, r16
 26e:	c0 01       	movw	r24, r0
 270:	21 9f       	mul	r18, r17
 272:	90 0d       	add	r25, r0
 274:	11 24       	eor	r1, r1
 276:	8e 01       	movw	r16, r28
 278:	08 1b       	sub	r16, r24
 27a:	19 0b       	sbc	r17, r25
 27c:	98 01       	movw	r18, r16
 27e:	ad ec       	ldi	r26, 0xCD	; 205
 280:	bc ec       	ldi	r27, 0xCC	; 204
 282:	0e 94 b2 01 	call	0x364	; 0x364 <__umulhisi3>
 286:	96 95       	lsr	r25
 288:	87 95       	ror	r24
 28a:	96 95       	lsr	r25
 28c:	87 95       	ror	r24
 28e:	96 95       	lsr	r25
 290:	87 95       	ror	r24
 292:	9c 01       	movw	r18, r24
 294:	22 0f       	add	r18, r18
 296:	33 1f       	adc	r19, r19
 298:	88 0f       	add	r24, r24
 29a:	99 1f       	adc	r25, r25
 29c:	88 0f       	add	r24, r24
 29e:	99 1f       	adc	r25, r25
 2a0:	88 0f       	add	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	82 0f       	add	r24, r18
 2a6:	93 1f       	adc	r25, r19
 2a8:	20 2f       	mov	r18, r16
 2aa:	28 1b       	sub	r18, r24
 2ac:	82 2f       	mov	r24, r18
 2ae:	0e 94 87 00 	call	0x10e	; 0x10e <Display_Digit>
		
		Select_Digit(2);
 2b2:	82 e0       	ldi	r24, 0x02	; 2
 2b4:	0e 94 60 00 	call	0xc0	; 0xc0 <Select_Digit>
		Display_Digit((num%100)/10);
 2b8:	98 01       	movw	r18, r16
 2ba:	ad ec       	ldi	r26, 0xCD	; 205
 2bc:	bc ec       	ldi	r27, 0xCC	; 204
 2be:	0e 94 b2 01 	call	0x364	; 0x364 <__umulhisi3>
 2c2:	96 95       	lsr	r25
 2c4:	87 95       	ror	r24
 2c6:	96 95       	lsr	r25
 2c8:	87 95       	ror	r24
 2ca:	96 95       	lsr	r25
 2cc:	87 95       	ror	r24
 2ce:	0e 94 87 00 	call	0x10e	; 0x10e <Display_Digit>
		
		Select_Digit(3);
 2d2:	83 e0       	ldi	r24, 0x03	; 3
 2d4:	0e 94 60 00 	call	0xc0	; 0xc0 <Select_Digit>
		Display_Digit((num/100)%10);
 2d8:	97 01       	movw	r18, r14
 2da:	ab e7       	ldi	r26, 0x7B	; 123
 2dc:	b4 e1       	ldi	r27, 0x14	; 20
 2de:	0e 94 b2 01 	call	0x364	; 0x364 <__umulhisi3>
 2e2:	ac 01       	movw	r20, r24
 2e4:	56 95       	lsr	r21
 2e6:	47 95       	ror	r20
 2e8:	9a 01       	movw	r18, r20
 2ea:	ad ec       	ldi	r26, 0xCD	; 205
 2ec:	bc ec       	ldi	r27, 0xCC	; 204
 2ee:	0e 94 b2 01 	call	0x364	; 0x364 <__umulhisi3>
 2f2:	96 95       	lsr	r25
 2f4:	87 95       	ror	r24
 2f6:	96 95       	lsr	r25
 2f8:	87 95       	ror	r24
 2fa:	96 95       	lsr	r25
 2fc:	87 95       	ror	r24
 2fe:	9c 01       	movw	r18, r24
 300:	22 0f       	add	r18, r18
 302:	33 1f       	adc	r19, r19
 304:	88 0f       	add	r24, r24
 306:	99 1f       	adc	r25, r25
 308:	88 0f       	add	r24, r24
 30a:	99 1f       	adc	r25, r25
 30c:	88 0f       	add	r24, r24
 30e:	99 1f       	adc	r25, r25
 310:	82 0f       	add	r24, r18
 312:	93 1f       	adc	r25, r19
 314:	24 2f       	mov	r18, r20
 316:	28 1b       	sub	r18, r24
 318:	82 2f       	mov	r24, r18
 31a:	0e 94 87 00 	call	0x10e	; 0x10e <Display_Digit>
		
		Select_Digit(4);
 31e:	84 e0       	ldi	r24, 0x04	; 4
 320:	0e 94 60 00 	call	0xc0	; 0xc0 <Select_Digit>
		Display_Digit(num/1000);
 324:	9e 01       	movw	r18, r28
 326:	36 95       	lsr	r19
 328:	27 95       	ror	r18
 32a:	36 95       	lsr	r19
 32c:	27 95       	ror	r18
 32e:	36 95       	lsr	r19
 330:	27 95       	ror	r18
 332:	a5 ec       	ldi	r26, 0xC5	; 197
 334:	b0 e2       	ldi	r27, 0x20	; 32
 336:	0e 94 b2 01 	call	0x364	; 0x364 <__umulhisi3>
 33a:	92 95       	swap	r25
 33c:	82 95       	swap	r24
 33e:	8f 70       	andi	r24, 0x0F	; 15
 340:	89 27       	eor	r24, r25
 342:	9f 70       	andi	r25, 0x0F	; 15
 344:	89 27       	eor	r24, r25
 346:	0e 94 87 00 	call	0x10e	; 0x10e <Display_Digit>
	}
}
 34a:	df 91       	pop	r29
 34c:	cf 91       	pop	r28
 34e:	1f 91       	pop	r17
 350:	0f 91       	pop	r16
 352:	ff 90       	pop	r15
 354:	ef 90       	pop	r14
 356:	08 95       	ret

00000358 <__tablejump2__>:
 358:	ee 0f       	add	r30, r30
 35a:	ff 1f       	adc	r31, r31
 35c:	05 90       	lpm	r0, Z+
 35e:	f4 91       	lpm	r31, Z
 360:	e0 2d       	mov	r30, r0
 362:	09 94       	ijmp

00000364 <__umulhisi3>:
 364:	a2 9f       	mul	r26, r18
 366:	b0 01       	movw	r22, r0
 368:	b3 9f       	mul	r27, r19
 36a:	c0 01       	movw	r24, r0
 36c:	a3 9f       	mul	r26, r19
 36e:	70 0d       	add	r23, r0
 370:	81 1d       	adc	r24, r1
 372:	11 24       	eor	r1, r1
 374:	91 1d       	adc	r25, r1
 376:	b2 9f       	mul	r27, r18
 378:	70 0d       	add	r23, r0
 37a:	81 1d       	adc	r24, r1
 37c:	11 24       	eor	r1, r1
 37e:	91 1d       	adc	r25, r1
 380:	08 95       	ret

00000382 <_exit>:
 382:	f8 94       	cli

00000384 <__stop_program>:
 384:	ff cf       	rjmp	.-2      	; 0x384 <__stop_program>
