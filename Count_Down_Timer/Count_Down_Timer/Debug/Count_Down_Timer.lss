
Count_Down_Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005fa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000064e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000064e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000680  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f0  00000000  00000000  000006bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fd7  00000000  00000000  000007ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009e9  00000000  00000000  00001783  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b5f  00000000  00000000  0000216c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000174  00000000  00000000  00002ccc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000046c  00000000  00000000  00002e40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000070a  00000000  00000000  000032ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  000039b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	cb 01       	movw	r24, r22
  56:	d8 01       	movw	r26, r16
  58:	e5 01       	movw	r28, r10
  5a:	f2 01       	movw	r30, r4
  5c:	ff 01       	movw	r30, r30
  5e:	0c 02       	muls	r16, r28
  60:	19 02       	muls	r17, r25
  62:	26 02       	muls	r18, r22
  64:	33 02       	muls	r19, r19
  66:	40 02       	muls	r20, r16

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf e5       	ldi	r28, 0x5F	; 95
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <main>
  78:	0c 94 fb 02 	jmp	0x5f6	; 0x5f6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <Button_Init>:
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK                                  
*******************************************************************************/
void Button_Init(uint8 PIN_Number)
{
	CLR_Bit(DIO_PORTD->DDR,PIN_Number);
  80:	91 b3       	in	r25, 0x11	; 17
  82:	21 e0       	ldi	r18, 0x01	; 1
  84:	30 e0       	ldi	r19, 0x00	; 0
  86:	02 c0       	rjmp	.+4      	; 0x8c <Button_Init+0xc>
  88:	22 0f       	add	r18, r18
  8a:	33 1f       	adc	r19, r19
  8c:	8a 95       	dec	r24
  8e:	e2 f7       	brpl	.-8      	; 0x88 <Button_Init+0x8>
  90:	20 95       	com	r18
  92:	29 23       	and	r18, r25
  94:	21 bb       	out	0x11, r18	; 17
  96:	08 95       	ret

00000098 <Button_GetValue>:
*******************************************************************************/
uint8 Button_GetValue(uint8 PIN_Number)
{
	uint8 Btn_Value=0,Temp=0;
	
	Btn_Value = GET_Bit(DIO_PORTD->PIN,PIN_Number);
  98:	20 b3       	in	r18, 0x10	; 16
  9a:	48 2f       	mov	r20, r24
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	b9 01       	movw	r22, r18
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <Button_GetValue+0xe>
  a2:	75 95       	asr	r23
  a4:	67 95       	ror	r22
  a6:	8a 95       	dec	r24
  a8:	e2 f7       	brpl	.-8      	; 0xa2 <Button_GetValue+0xa>
  aa:	cb 01       	movw	r24, r22
  ac:	81 70       	andi	r24, 0x01	; 1
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
uint8 Button_GetValue(uint8 PIN_Number)
{
	uint8 Btn_Value=0,Temp=0;
  ae:	20 e0       	ldi	r18, 0x00	; 0
	
	Btn_Value = GET_Bit(DIO_PORTD->PIN,PIN_Number);
	
	while(Temp==0)
  b0:	09 c0       	rjmp	.+18     	; 0xc4 <Button_GetValue+0x2c>
	{
		Temp = GET_Bit(DIO_PORTD->PIN,PIN_Number);
  b2:	20 b3       	in	r18, 0x10	; 16
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	04 2e       	mov	r0, r20
  b8:	02 c0       	rjmp	.+4      	; 0xbe <Button_GetValue+0x26>
  ba:	35 95       	asr	r19
  bc:	27 95       	ror	r18
  be:	0a 94       	dec	r0
  c0:	e2 f7       	brpl	.-8      	; 0xba <Button_GetValue+0x22>
  c2:	21 70       	andi	r18, 0x01	; 1
{
	uint8 Btn_Value=0,Temp=0;
	
	Btn_Value = GET_Bit(DIO_PORTD->PIN,PIN_Number);
	
	while(Temp==0)
  c4:	22 23       	and	r18, r18
  c6:	a9 f3       	breq	.-22     	; 0xb2 <Button_GetValue+0x1a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	ef e9       	ldi	r30, 0x9F	; 159
  ca:	ff e0       	ldi	r31, 0x0F	; 15
  cc:	31 97       	sbiw	r30, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <Button_GetValue+0x34>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <Button_GetValue+0x3a>
  d2:	00 00       	nop
	
	//_delay_ms(10); Adjusted to 1ms because of the 7-Seg to reduce the delay
	_delay_ms(1);
	
	return Btn_Value;
}
  d4:	08 95       	ret

000000d6 <Buzzer_Init>:
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK                                  
*******************************************************************************/
void Buzzer_Init(void)
{
	SET_Bit(DIO_PORTC->DDR,6);
  d6:	84 b3       	in	r24, 0x14	; 20
  d8:	80 64       	ori	r24, 0x40	; 64
  da:	84 bb       	out	0x14, r24	; 20
  dc:	08 95       	ret

000000de <Buzzer_ON>:
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void Buzzer_ON(void)
{
	SET_Bit(DIO_PORTC->PORT,6);
  de:	85 b3       	in	r24, 0x15	; 21
  e0:	80 64       	ori	r24, 0x40	; 64
  e2:	85 bb       	out	0x15, r24	; 21
  e4:	08 95       	ret

000000e6 <Buzzer_OFF>:
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void Buzzer_OFF(void)
{
	CLR_Bit(DIO_PORTC->PORT,6);
  e6:	85 b3       	in	r24, 0x15	; 21
  e8:	8f 7b       	andi	r24, 0xBF	; 191
  ea:	85 bb       	out	0x15, r24	; 21
  ec:	08 95       	ret

000000ee <BUZZ>:
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void BUZZ(void)
{
	Buzzer_Init();
  ee:	0e 94 6b 00 	call	0xd6	; 0xd6 <Buzzer_Init>
	Buzzer_ON();
  f2:	0e 94 6f 00 	call	0xde	; 0xde <Buzzer_ON>
  f6:	2f ef       	ldi	r18, 0xFF	; 255
  f8:	84 e3       	ldi	r24, 0x34	; 52
  fa:	9c e0       	ldi	r25, 0x0C	; 12
  fc:	21 50       	subi	r18, 0x01	; 1
  fe:	80 40       	sbci	r24, 0x00	; 0
 100:	90 40       	sbci	r25, 0x00	; 0
 102:	e1 f7       	brne	.-8      	; 0xfc <BUZZ+0xe>
 104:	00 c0       	rjmp	.+0      	; 0x106 <BUZZ+0x18>
 106:	00 00       	nop
	_delay_ms(250);
	Buzzer_OFF();
 108:	0e 94 73 00 	call	0xe6	; 0xe6 <Buzzer_OFF>
 10c:	08 95       	ret

0000010e <LED_Init>:
* \Parameters (out): None                                                      
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK                                  
*******************************************************************************/
void LED_Init(uint8 Color){
	switch(Color)
 10e:	81 30       	cpi	r24, 0x01	; 1
 110:	51 f0       	breq	.+20     	; 0x126 <LED_Init+0x18>
 112:	28 f0       	brcs	.+10     	; 0x11e <LED_Init+0x10>
 114:	82 30       	cpi	r24, 0x02	; 2
 116:	59 f0       	breq	.+22     	; 0x12e <LED_Init+0x20>
 118:	83 30       	cpi	r24, 0x03	; 3
 11a:	69 f0       	breq	.+26     	; 0x136 <LED_Init+0x28>
 11c:	08 95       	ret
	{
		case RED:
		SET_Bit(DIO_PORTB->DDR , 7);
 11e:	87 b3       	in	r24, 0x17	; 23
 120:	80 68       	ori	r24, 0x80	; 128
 122:	87 bb       	out	0x17, r24	; 23
		break;
 124:	08 95       	ret
		case GREEN:
		SET_Bit(DIO_PORTA->DDR , 4);
 126:	8a b3       	in	r24, 0x1a	; 26
 128:	80 61       	ori	r24, 0x10	; 16
 12a:	8a bb       	out	0x1a, r24	; 26
		break;
 12c:	08 95       	ret
		case BLUE:
		SET_Bit(DIO_PORTA->DDR , 5);
 12e:	8a b3       	in	r24, 0x1a	; 26
 130:	80 62       	ori	r24, 0x20	; 32
 132:	8a bb       	out	0x1a, r24	; 26
		break;
 134:	08 95       	ret
		case YELLOW:
		SET_Bit(DIO_PORTA->DDR , 6);
 136:	8a b3       	in	r24, 0x1a	; 26
 138:	80 64       	ori	r24, 0x40	; 64
 13a:	8a bb       	out	0x1a, r24	; 26
 13c:	08 95       	ret

0000013e <LED_ON>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void LED_ON(uint8 Color){
	switch(Color)
 13e:	81 30       	cpi	r24, 0x01	; 1
 140:	51 f0       	breq	.+20     	; 0x156 <LED_ON+0x18>
 142:	28 f0       	brcs	.+10     	; 0x14e <LED_ON+0x10>
 144:	82 30       	cpi	r24, 0x02	; 2
 146:	59 f0       	breq	.+22     	; 0x15e <LED_ON+0x20>
 148:	83 30       	cpi	r24, 0x03	; 3
 14a:	69 f0       	breq	.+26     	; 0x166 <LED_ON+0x28>
 14c:	08 95       	ret
	{
		case RED:
		SET_Bit(DIO_PORTB->PORT , 7);
 14e:	88 b3       	in	r24, 0x18	; 24
 150:	80 68       	ori	r24, 0x80	; 128
 152:	88 bb       	out	0x18, r24	; 24
		break;
 154:	08 95       	ret
		case GREEN:
		SET_Bit(DIO_PORTA->PORT , 4);
 156:	8b b3       	in	r24, 0x1b	; 27
 158:	80 61       	ori	r24, 0x10	; 16
 15a:	8b bb       	out	0x1b, r24	; 27
		break;
 15c:	08 95       	ret
		case BLUE:
		SET_Bit(DIO_PORTA->PORT , 5);
 15e:	8b b3       	in	r24, 0x1b	; 27
 160:	80 62       	ori	r24, 0x20	; 32
 162:	8b bb       	out	0x1b, r24	; 27
		break;
 164:	08 95       	ret
		case YELLOW:
		SET_Bit(DIO_PORTA->PORT , 6);
 166:	8b b3       	in	r24, 0x1b	; 27
 168:	80 64       	ori	r24, 0x40	; 64
 16a:	8b bb       	out	0x1b, r24	; 27
 16c:	08 95       	ret

0000016e <LED_OFF>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void LED_OFF(uint8 Color){
	switch(Color)
 16e:	81 30       	cpi	r24, 0x01	; 1
 170:	51 f0       	breq	.+20     	; 0x186 <LED_OFF+0x18>
 172:	28 f0       	brcs	.+10     	; 0x17e <LED_OFF+0x10>
 174:	82 30       	cpi	r24, 0x02	; 2
 176:	59 f0       	breq	.+22     	; 0x18e <LED_OFF+0x20>
 178:	83 30       	cpi	r24, 0x03	; 3
 17a:	69 f0       	breq	.+26     	; 0x196 <LED_OFF+0x28>
 17c:	08 95       	ret
	{
		case RED:
		CLR_Bit(DIO_PORTB->PORT , 7);
 17e:	88 b3       	in	r24, 0x18	; 24
 180:	8f 77       	andi	r24, 0x7F	; 127
 182:	88 bb       	out	0x18, r24	; 24
		break;
 184:	08 95       	ret
		case GREEN:
		CLR_Bit(DIO_PORTA->PORT , 4);
 186:	8b b3       	in	r24, 0x1b	; 27
 188:	8f 7e       	andi	r24, 0xEF	; 239
 18a:	8b bb       	out	0x1b, r24	; 27
		break;
 18c:	08 95       	ret
		case BLUE:
		CLR_Bit(DIO_PORTA->PORT , 5);
 18e:	8b b3       	in	r24, 0x1b	; 27
 190:	8f 7d       	andi	r24, 0xDF	; 223
 192:	8b bb       	out	0x1b, r24	; 27
		break;
 194:	08 95       	ret
		case YELLOW:
		CLR_Bit(DIO_PORTA->PORT , 6);
 196:	8b b3       	in	r24, 0x1b	; 27
 198:	8f 7b       	andi	r24, 0xBF	; 191
 19a:	8b bb       	out	0x1b, r24	; 27
 19c:	08 95       	ret

0000019e <LED_Toggle>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void LED_Toggle(uint8 Color){
	switch(Color)
 19e:	81 30       	cpi	r24, 0x01	; 1
 1a0:	51 f0       	breq	.+20     	; 0x1b6 <LED_Toggle+0x18>
 1a2:	28 f0       	brcs	.+10     	; 0x1ae <LED_Toggle+0x10>
 1a4:	82 30       	cpi	r24, 0x02	; 2
 1a6:	61 f0       	breq	.+24     	; 0x1c0 <LED_Toggle+0x22>
 1a8:	83 30       	cpi	r24, 0x03	; 3
 1aa:	79 f0       	breq	.+30     	; 0x1ca <LED_Toggle+0x2c>
 1ac:	08 95       	ret
	{
		case RED:
		TOGGLE_Bit(DIO_PORTB->PORT , 7);
 1ae:	88 b3       	in	r24, 0x18	; 24
 1b0:	80 58       	subi	r24, 0x80	; 128
 1b2:	88 bb       	out	0x18, r24	; 24
		break;
 1b4:	08 95       	ret
		case GREEN:
		TOGGLE_Bit(DIO_PORTA->PORT , 4);
 1b6:	9b b3       	in	r25, 0x1b	; 27
 1b8:	80 e1       	ldi	r24, 0x10	; 16
 1ba:	89 27       	eor	r24, r25
 1bc:	8b bb       	out	0x1b, r24	; 27
		break;
 1be:	08 95       	ret
		case BLUE:
		TOGGLE_Bit(DIO_PORTA->PORT , 5);
 1c0:	9b b3       	in	r25, 0x1b	; 27
 1c2:	80 e2       	ldi	r24, 0x20	; 32
 1c4:	89 27       	eor	r24, r25
 1c6:	8b bb       	out	0x1b, r24	; 27
		break;
 1c8:	08 95       	ret
		case YELLOW:
		TOGGLE_Bit(DIO_PORTA->PORT , 6);
 1ca:	9b b3       	in	r25, 0x1b	; 27
 1cc:	80 e4       	ldi	r24, 0x40	; 64
 1ce:	89 27       	eor	r24, r25
 1d0:	8b bb       	out	0x1b, r24	; 27
 1d2:	08 95       	ret

000001d4 <main>:

int main(void)
{
	uint8 Start=0,Min=0,Sec=0,Reset=0,Btn=0;
	
	SVN_Init();
 1d4:	0e 94 81 01 	call	0x302	; 0x302 <SVN_Init>
	Buzzer_Init();
 1d8:	0e 94 6b 00 	call	0xd6	; 0xd6 <Buzzer_Init>
	
	Button_Init(Button_0);
 1dc:	87 e0       	ldi	r24, 0x07	; 7
 1de:	0e 94 40 00 	call	0x80	; 0x80 <Button_Init>
	Button_Init(Button_1);
 1e2:	86 e0       	ldi	r24, 0x06	; 6
 1e4:	0e 94 40 00 	call	0x80	; 0x80 <Button_Init>
	Button_Init(Button_2);
 1e8:	85 e0       	ldi	r24, 0x05	; 5
 1ea:	0e 94 40 00 	call	0x80	; 0x80 <Button_Init>
	Button_Init(Button_3);
 1ee:	83 e0       	ldi	r24, 0x03	; 3
 1f0:	0e 94 40 00 	call	0x80	; 0x80 <Button_Init>
	
	LED_Init(RED);
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	0e 94 87 00 	call	0x10e	; 0x10e <LED_Init>
	LED_Init(GREEN);
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	0e 94 87 00 	call	0x10e	; 0x10e <LED_Init>
	LED_Init(BLUE);
 200:	82 e0       	ldi	r24, 0x02	; 2
 202:	0e 94 87 00 	call	0x10e	; 0x10e <LED_Init>
	
	LED_ON(RED);//Initial State "Setting Time"
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	0e 94 9f 00 	call	0x13e	; 0x13e <LED_ON>
#define Sec_Btn		Button_2
#define Reset_Btn	Button_3

int main(void)
{
	uint8 Start=0,Min=0,Sec=0,Reset=0,Btn=0;
 20c:	10 e0       	ldi	r17, 0x00	; 0
 20e:	00 e0       	ldi	r16, 0x00	; 0
 210:	f1 2c       	mov	r15, r1
	LED_ON(RED);//Initial State "Setting Time"
	
    /* Replace with your application code */
    while (1) 
    {		
		Display_Number((Min*100)+Sec);
 212:	81 2f       	mov	r24, r17
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	24 e6       	ldi	r18, 0x64	; 100
 218:	02 9f       	mul	r16, r18
 21a:	80 0d       	add	r24, r0
 21c:	91 1d       	adc	r25, r1
 21e:	11 24       	eor	r1, r1
 220:	0e 94 53 02 	call	0x4a6	; 0x4a6 <Display_Number>
		
		Btn = Button_GetValue(Button_0);
 224:	87 e0       	ldi	r24, 0x07	; 7
 226:	0e 94 4c 00 	call	0x98	; 0x98 <Button_GetValue>
		if(Btn == 0)
 22a:	81 11       	cpse	r24, r1
 22c:	07 c0       	rjmp	.+14     	; 0x23c <main+0x68>
		{
			Start = 1;
			LED_OFF(RED);
 22e:	0e 94 b7 00 	call	0x16e	; 0x16e <LED_OFF>
			LED_ON(GREEN);
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	0e 94 9f 00 	call	0x13e	; 0x13e <LED_ON>
		Display_Number((Min*100)+Sec);
		
		Btn = Button_GetValue(Button_0);
		if(Btn == 0)
		{
			Start = 1;
 238:	ff 24       	eor	r15, r15
 23a:	f3 94       	inc	r15
			LED_OFF(RED);
			LED_ON(GREEN);
		}
		Btn = Button_GetValue(Button_1);
 23c:	86 e0       	ldi	r24, 0x06	; 6
 23e:	0e 94 4c 00 	call	0x98	; 0x98 <Button_GetValue>
		if(Btn == 0)
 242:	81 11       	cpse	r24, r1
 244:	03 c0       	rjmp	.+6      	; 0x24c <main+0x78>
		{
			if(Min<60)
 246:	0c 33       	cpi	r16, 0x3C	; 60
 248:	08 f4       	brcc	.+2      	; 0x24c <main+0x78>
				Min++;
 24a:	0f 5f       	subi	r16, 0xFF	; 255
		}
		Btn = Button_GetValue(Button_2);
 24c:	85 e0       	ldi	r24, 0x05	; 5
 24e:	0e 94 4c 00 	call	0x98	; 0x98 <Button_GetValue>
		if(Btn == 0)
 252:	81 11       	cpse	r24, r1
 254:	03 c0       	rjmp	.+6      	; 0x25c <main+0x88>
		{
			if(Sec<60)
 256:	1c 33       	cpi	r17, 0x3C	; 60
 258:	08 f4       	brcc	.+2      	; 0x25c <main+0x88>
				Sec++;	
 25a:	1f 5f       	subi	r17, 0xFF	; 255
		}
		Reset = Button_GetValue(Button_3);
 25c:	83 e0       	ldi	r24, 0x03	; 3
 25e:	0e 94 4c 00 	call	0x98	; 0x98 <Button_GetValue>
		if(Reset == 0)
 262:	81 11       	cpse	r24, r1
 264:	4b c0       	rjmp	.+150    	; 0x2fc <main+0x128>
		{
			Min = Sec = Start = 0;
			LED_ON(RED);
 266:	0e 94 9f 00 	call	0x13e	; 0x13e <LED_ON>
			LED_OFF(GREEN);
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	0e 94 b7 00 	call	0x16e	; 0x16e <LED_OFF>
				Sec++;	
		}
		Reset = Button_GetValue(Button_3);
		if(Reset == 0)
		{
			Min = Sec = Start = 0;
 270:	10 e0       	ldi	r17, 0x00	; 0
 272:	00 e0       	ldi	r16, 0x00	; 0
 274:	f1 2c       	mov	r15, r1
 276:	42 c0       	rjmp	.+132    	; 0x2fc <main+0x128>

			while(Sec>0)
			{
				for (int i=0;i<100;i++)
				{
					Display_Number((Min*100)+Sec);
 278:	81 2f       	mov	r24, r17
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	24 e6       	ldi	r18, 0x64	; 100
 27e:	02 9f       	mul	r16, r18
 280:	80 0d       	add	r24, r0
 282:	91 1d       	adc	r25, r1
 284:	11 24       	eor	r1, r1
 286:	0e 94 53 02 	call	0x4a6	; 0x4a6 <Display_Number>
 28a:	8f e3       	ldi	r24, 0x3F	; 63
 28c:	9c e9       	ldi	r25, 0x9C	; 156
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <main+0xba>
 292:	00 c0       	rjmp	.+0      	; 0x294 <main+0xc0>
 294:	00 00       	nop
		while(Start)
		{

			while(Sec>0)
			{
				for (int i=0;i<100;i++)
 296:	21 96       	adiw	r28, 0x01	; 1
 298:	02 c0       	rjmp	.+4      	; 0x29e <main+0xca>
 29a:	c0 e0       	ldi	r28, 0x00	; 0
 29c:	d0 e0       	ldi	r29, 0x00	; 0
 29e:	c4 36       	cpi	r28, 0x64	; 100
 2a0:	d1 05       	cpc	r29, r1
 2a2:	54 f3       	brlt	.-44     	; 0x278 <main+0xa4>
				{
					Display_Number((Min*100)+Sec);
					_delay_ms(10);
				}
				Sec--;
 2a4:	11 50       	subi	r17, 0x01	; 1
			LED_OFF(GREEN);
		}
		while(Start)
		{

			while(Sec>0)
 2a6:	11 11       	cpse	r17, r1
 2a8:	f8 cf       	rjmp	.-16     	; 0x29a <main+0xc6>
				Sec--;
				/*Buzzer_ON();
				_delay_ms(50);
				Buzzer_OFF();*/
			}
			if (Min>0)
 2aa:	00 23       	and	r16, r16
 2ac:	19 f0       	breq	.+6      	; 0x2b4 <main+0xe0>
			{
				Min--;
 2ae:	01 50       	subi	r16, 0x01	; 1
				Sec = 59;
 2b0:	1b e3       	ldi	r17, 0x3B	; 59
 2b2:	24 c0       	rjmp	.+72     	; 0x2fc <main+0x128>
			}
			else if(Min == 0 && Sec == 0)
 2b4:	01 11       	cpse	r16, r1
 2b6:	22 c0       	rjmp	.+68     	; 0x2fc <main+0x128>
 2b8:	11 11       	cpse	r17, r1
 2ba:	20 c0       	rjmp	.+64     	; 0x2fc <main+0x128>
			{
				//Display_Number((Min*100)+Sec);
				Start = 0;
				LED_OFF(GREEN);
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	0e 94 b7 00 	call	0x16e	; 0x16e <LED_OFF>
				for (int i=0;i<5;i++)
 2c2:	c0 e0       	ldi	r28, 0x00	; 0
 2c4:	d0 e0       	ldi	r29, 0x00	; 0
 2c6:	0f c0       	rjmp	.+30     	; 0x2e6 <main+0x112>
				{
					LED_Toggle(BLUE);
 2c8:	82 e0       	ldi	r24, 0x02	; 2
 2ca:	0e 94 cf 00 	call	0x19e	; 0x19e <LED_Toggle>
					BUZZ();
 2ce:	0e 94 77 00 	call	0xee	; 0xee <BUZZ>
 2d2:	9f ef       	ldi	r25, 0xFF	; 255
 2d4:	26 e7       	ldi	r18, 0x76	; 118
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	91 50       	subi	r25, 0x01	; 1
 2da:	20 40       	sbci	r18, 0x00	; 0
 2dc:	80 40       	sbci	r24, 0x00	; 0
 2de:	e1 f7       	brne	.-8      	; 0x2d8 <main+0x104>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <main+0x10e>
 2e2:	00 00       	nop
			else if(Min == 0 && Sec == 0)
			{
				//Display_Number((Min*100)+Sec);
				Start = 0;
				LED_OFF(GREEN);
				for (int i=0;i<5;i++)
 2e4:	21 96       	adiw	r28, 0x01	; 1
 2e6:	c5 30       	cpi	r28, 0x05	; 5
 2e8:	d1 05       	cpc	r29, r1
 2ea:	74 f3       	brlt	.-36     	; 0x2c8 <main+0xf4>
				{
					LED_Toggle(BLUE);
					BUZZ();
					_delay_ms(30);
				}
				LED_OFF(BLUE);
 2ec:	82 e0       	ldi	r24, 0x02	; 2
 2ee:	0e 94 b7 00 	call	0x16e	; 0x16e <LED_OFF>
				LED_ON(RED);
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	0e 94 9f 00 	call	0x13e	; 0x13e <LED_ON>
				Sec = 59;
			}
			else if(Min == 0 && Sec == 0)
			{
				//Display_Number((Min*100)+Sec);
				Start = 0;
 2f8:	f1 2e       	mov	r15, r17
					BUZZ();
					_delay_ms(30);
				}
				LED_OFF(BLUE);
				LED_ON(RED);
				break;
 2fa:	8b cf       	rjmp	.-234    	; 0x212 <main+0x3e>
		{
			Min = Sec = Start = 0;
			LED_ON(RED);
			LED_OFF(GREEN);
		}
		while(Start)
 2fc:	f1 10       	cpse	r15, r1
 2fe:	d3 cf       	rjmp	.-90     	; 0x2a6 <main+0xd2>
 300:	88 cf       	rjmp	.-240    	; 0x212 <main+0x3e>

00000302 <SVN_Init>:
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK                                  
*******************************************************************************/
void SVN_Init(void)
{
	SET_Bit(DIO_PORTB->DDR,0);
 302:	87 b3       	in	r24, 0x17	; 23
 304:	81 60       	ori	r24, 0x01	; 1
 306:	87 bb       	out	0x17, r24	; 23
	SET_Bit(DIO_PORTB->DDR,1);
 308:	87 b3       	in	r24, 0x17	; 23
 30a:	82 60       	ori	r24, 0x02	; 2
 30c:	87 bb       	out	0x17, r24	; 23
	SET_Bit(DIO_PORTB->DDR,2);
 30e:	87 b3       	in	r24, 0x17	; 23
 310:	84 60       	ori	r24, 0x04	; 4
 312:	87 bb       	out	0x17, r24	; 23
	SET_Bit(DIO_PORTB->DDR,4);
 314:	87 b3       	in	r24, 0x17	; 23
 316:	80 61       	ori	r24, 0x10	; 16
 318:	87 bb       	out	0x17, r24	; 23
	
	// Set digit PORTs of Digits as output.
	SET_Bit(DIO_PORTA->DDR,2);
 31a:	8a b3       	in	r24, 0x1a	; 26
 31c:	84 60       	ori	r24, 0x04	; 4
 31e:	8a bb       	out	0x1a, r24	; 26
	SET_Bit(DIO_PORTA->DDR,3);
 320:	8a b3       	in	r24, 0x1a	; 26
 322:	88 60       	ori	r24, 0x08	; 8
 324:	8a bb       	out	0x1a, r24	; 26
	SET_Bit(DIO_PORTB->DDR,5);
 326:	87 b3       	in	r24, 0x17	; 23
 328:	80 62       	ori	r24, 0x20	; 32
 32a:	87 bb       	out	0x17, r24	; 23
	SET_Bit(DIO_PORTB->DDR,6);
 32c:	87 b3       	in	r24, 0x17	; 23
 32e:	80 64       	ori	r24, 0x40	; 64
 330:	87 bb       	out	0x17, r24	; 23
 332:	08 95       	ret

00000334 <Select_Digit>:
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void Select_Digit(uint8 num)
{
	SET_Bit(DIO_PORTA->PORT,2);
 334:	9b b3       	in	r25, 0x1b	; 27
 336:	94 60       	ori	r25, 0x04	; 4
 338:	9b bb       	out	0x1b, r25	; 27
	SET_Bit(DIO_PORTA->PORT,3);
 33a:	9b b3       	in	r25, 0x1b	; 27
 33c:	98 60       	ori	r25, 0x08	; 8
 33e:	9b bb       	out	0x1b, r25	; 27
	SET_Bit(DIO_PORTB->PORT,5);
 340:	98 b3       	in	r25, 0x18	; 24
 342:	90 62       	ori	r25, 0x20	; 32
 344:	98 bb       	out	0x18, r25	; 24
	SET_Bit(DIO_PORTB->PORT,6);
 346:	98 b3       	in	r25, 0x18	; 24
 348:	90 64       	ori	r25, 0x40	; 64
 34a:	98 bb       	out	0x18, r25	; 24

	switch (num)
 34c:	82 30       	cpi	r24, 0x02	; 2
 34e:	69 f0       	breq	.+26     	; 0x36a <Select_Digit+0x36>
 350:	18 f4       	brcc	.+6      	; 0x358 <Select_Digit+0x24>
 352:	81 30       	cpi	r24, 0x01	; 1
 354:	31 f0       	breq	.+12     	; 0x362 <Select_Digit+0x2e>
 356:	08 95       	ret
 358:	83 30       	cpi	r24, 0x03	; 3
 35a:	59 f0       	breq	.+22     	; 0x372 <Select_Digit+0x3e>
 35c:	84 30       	cpi	r24, 0x04	; 4
 35e:	69 f0       	breq	.+26     	; 0x37a <Select_Digit+0x46>
 360:	08 95       	ret
	{
		case 1:
		CLR_Bit(DIO_PORTA->PORT,3);
 362:	8b b3       	in	r24, 0x1b	; 27
 364:	87 7f       	andi	r24, 0xF7	; 247
 366:	8b bb       	out	0x1b, r24	; 27
		break;
 368:	08 95       	ret
		case 2:
		CLR_Bit(DIO_PORTA->PORT,2);
 36a:	8b b3       	in	r24, 0x1b	; 27
 36c:	8b 7f       	andi	r24, 0xFB	; 251
 36e:	8b bb       	out	0x1b, r24	; 27
		break;
 370:	08 95       	ret
		case 3:
		CLR_Bit(DIO_PORTB->PORT,5);
 372:	88 b3       	in	r24, 0x18	; 24
 374:	8f 7d       	andi	r24, 0xDF	; 223
 376:	88 bb       	out	0x18, r24	; 24
		break;
 378:	08 95       	ret
		case 4:
		CLR_Bit(DIO_PORTB->PORT,6);
 37a:	88 b3       	in	r24, 0x18	; 24
 37c:	8f 7b       	andi	r24, 0xBF	; 191
 37e:	88 bb       	out	0x18, r24	; 24
 380:	08 95       	ret

00000382 <Display_Digit>:
*                                    E_NOT_OK
*******************************************************************************/
void Display_Digit(uint8 num)
{
	//DIO_PORTB->PORT = SVN_Numbers[num];
	switch(num)
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	8a 30       	cpi	r24, 0x0A	; 10
 386:	91 05       	cpc	r25, r1
 388:	08 f0       	brcs	.+2      	; 0x38c <Display_Digit+0xa>
 38a:	86 c0       	rjmp	.+268    	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
 38c:	fc 01       	movw	r30, r24
 38e:	e6 5d       	subi	r30, 0xD6	; 214
 390:	ff 4f       	sbci	r31, 0xFF	; 255
 392:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__tablejump2__>
	{
		case 0:
		CLR_Bit(DIO_PORTB->PORT,0);//0000 0000 : 0x00
 396:	88 b3       	in	r24, 0x18	; 24
 398:	8e 7f       	andi	r24, 0xFE	; 254
 39a:	88 bb       	out	0x18, r24	; 24
		CLR_Bit(DIO_PORTB->PORT,1);
 39c:	88 b3       	in	r24, 0x18	; 24
 39e:	8d 7f       	andi	r24, 0xFD	; 253
 3a0:	88 bb       	out	0x18, r24	; 24
		CLR_Bit(DIO_PORTB->PORT,2);
 3a2:	88 b3       	in	r24, 0x18	; 24
 3a4:	8b 7f       	andi	r24, 0xFB	; 251
 3a6:	88 bb       	out	0x18, r24	; 24
		CLR_Bit(DIO_PORTB->PORT,4);
 3a8:	88 b3       	in	r24, 0x18	; 24
 3aa:	8f 7e       	andi	r24, 0xEF	; 239
 3ac:	88 bb       	out	0x18, r24	; 24
		break;
 3ae:	74 c0       	rjmp	.+232    	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
		case 1:
		SET_Bit(DIO_PORTB->PORT,0);//0000 0001 : 0x01
 3b0:	88 b3       	in	r24, 0x18	; 24
 3b2:	81 60       	ori	r24, 0x01	; 1
 3b4:	88 bb       	out	0x18, r24	; 24
		CLR_Bit(DIO_PORTB->PORT,1);
 3b6:	88 b3       	in	r24, 0x18	; 24
 3b8:	8d 7f       	andi	r24, 0xFD	; 253
 3ba:	88 bb       	out	0x18, r24	; 24
		CLR_Bit(DIO_PORTB->PORT,2);
 3bc:	88 b3       	in	r24, 0x18	; 24
 3be:	8b 7f       	andi	r24, 0xFB	; 251
 3c0:	88 bb       	out	0x18, r24	; 24
		CLR_Bit(DIO_PORTB->PORT,4);
 3c2:	88 b3       	in	r24, 0x18	; 24
 3c4:	8f 7e       	andi	r24, 0xEF	; 239
 3c6:	88 bb       	out	0x18, r24	; 24
		break;
 3c8:	67 c0       	rjmp	.+206    	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
		case 2:
		CLR_Bit(DIO_PORTB->PORT,0);//0000 0010 : 0x02
 3ca:	88 b3       	in	r24, 0x18	; 24
 3cc:	8e 7f       	andi	r24, 0xFE	; 254
 3ce:	88 bb       	out	0x18, r24	; 24
		SET_Bit(DIO_PORTB->PORT,1);
 3d0:	88 b3       	in	r24, 0x18	; 24
 3d2:	82 60       	ori	r24, 0x02	; 2
 3d4:	88 bb       	out	0x18, r24	; 24
		CLR_Bit(DIO_PORTB->PORT,2);
 3d6:	88 b3       	in	r24, 0x18	; 24
 3d8:	8b 7f       	andi	r24, 0xFB	; 251
 3da:	88 bb       	out	0x18, r24	; 24
		CLR_Bit(DIO_PORTB->PORT,4);
 3dc:	88 b3       	in	r24, 0x18	; 24
 3de:	8f 7e       	andi	r24, 0xEF	; 239
 3e0:	88 bb       	out	0x18, r24	; 24
		break;
 3e2:	5a c0       	rjmp	.+180    	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
		case 3:
		SET_Bit(DIO_PORTB->PORT,0);//0000 0011 : 0x03
 3e4:	88 b3       	in	r24, 0x18	; 24
 3e6:	81 60       	ori	r24, 0x01	; 1
 3e8:	88 bb       	out	0x18, r24	; 24
		SET_Bit(DIO_PORTB->PORT,1);
 3ea:	88 b3       	in	r24, 0x18	; 24
 3ec:	82 60       	ori	r24, 0x02	; 2
 3ee:	88 bb       	out	0x18, r24	; 24
		CLR_Bit(DIO_PORTB->PORT,2);
 3f0:	88 b3       	in	r24, 0x18	; 24
 3f2:	8b 7f       	andi	r24, 0xFB	; 251
 3f4:	88 bb       	out	0x18, r24	; 24
		CLR_Bit(DIO_PORTB->PORT,4);
 3f6:	88 b3       	in	r24, 0x18	; 24
 3f8:	8f 7e       	andi	r24, 0xEF	; 239
 3fa:	88 bb       	out	0x18, r24	; 24
		break;
 3fc:	4d c0       	rjmp	.+154    	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
		case 4:
		CLR_Bit(DIO_PORTB->PORT,0);//0000 0100 : 0x04
 3fe:	88 b3       	in	r24, 0x18	; 24
 400:	8e 7f       	andi	r24, 0xFE	; 254
 402:	88 bb       	out	0x18, r24	; 24
		CLR_Bit(DIO_PORTB->PORT,1);
 404:	88 b3       	in	r24, 0x18	; 24
 406:	8d 7f       	andi	r24, 0xFD	; 253
 408:	88 bb       	out	0x18, r24	; 24
		SET_Bit(DIO_PORTB->PORT,2);
 40a:	88 b3       	in	r24, 0x18	; 24
 40c:	84 60       	ori	r24, 0x04	; 4
 40e:	88 bb       	out	0x18, r24	; 24
		CLR_Bit(DIO_PORTB->PORT,4);
 410:	88 b3       	in	r24, 0x18	; 24
 412:	8f 7e       	andi	r24, 0xEF	; 239
 414:	88 bb       	out	0x18, r24	; 24
		break;
 416:	40 c0       	rjmp	.+128    	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
		case 5:
		SET_Bit(DIO_PORTB->PORT,0);//0000 0101 : 0x05
 418:	88 b3       	in	r24, 0x18	; 24
 41a:	81 60       	ori	r24, 0x01	; 1
 41c:	88 bb       	out	0x18, r24	; 24
		CLR_Bit(DIO_PORTB->PORT,1);
 41e:	88 b3       	in	r24, 0x18	; 24
 420:	8d 7f       	andi	r24, 0xFD	; 253
 422:	88 bb       	out	0x18, r24	; 24
		SET_Bit(DIO_PORTB->PORT,2);
 424:	88 b3       	in	r24, 0x18	; 24
 426:	84 60       	ori	r24, 0x04	; 4
 428:	88 bb       	out	0x18, r24	; 24
		CLR_Bit(DIO_PORTB->PORT,4);
 42a:	88 b3       	in	r24, 0x18	; 24
 42c:	8f 7e       	andi	r24, 0xEF	; 239
 42e:	88 bb       	out	0x18, r24	; 24
		break;
 430:	33 c0       	rjmp	.+102    	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
		case 6:
		CLR_Bit(DIO_PORTB->PORT,0);//0000 0110 : 0x06
 432:	88 b3       	in	r24, 0x18	; 24
 434:	8e 7f       	andi	r24, 0xFE	; 254
 436:	88 bb       	out	0x18, r24	; 24
		SET_Bit(DIO_PORTB->PORT,1);
 438:	88 b3       	in	r24, 0x18	; 24
 43a:	82 60       	ori	r24, 0x02	; 2
 43c:	88 bb       	out	0x18, r24	; 24
		SET_Bit(DIO_PORTB->PORT,2);
 43e:	88 b3       	in	r24, 0x18	; 24
 440:	84 60       	ori	r24, 0x04	; 4
 442:	88 bb       	out	0x18, r24	; 24
		CLR_Bit(DIO_PORTB->PORT,4);
 444:	88 b3       	in	r24, 0x18	; 24
 446:	8f 7e       	andi	r24, 0xEF	; 239
 448:	88 bb       	out	0x18, r24	; 24
		break;
 44a:	26 c0       	rjmp	.+76     	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
		case 7:
		SET_Bit(DIO_PORTB->PORT,0);//0000 0111 : 0x07
 44c:	88 b3       	in	r24, 0x18	; 24
 44e:	81 60       	ori	r24, 0x01	; 1
 450:	88 bb       	out	0x18, r24	; 24
		SET_Bit(DIO_PORTB->PORT,1);
 452:	88 b3       	in	r24, 0x18	; 24
 454:	82 60       	ori	r24, 0x02	; 2
 456:	88 bb       	out	0x18, r24	; 24
		SET_Bit(DIO_PORTB->PORT,2);
 458:	88 b3       	in	r24, 0x18	; 24
 45a:	84 60       	ori	r24, 0x04	; 4
 45c:	88 bb       	out	0x18, r24	; 24
		CLR_Bit(DIO_PORTB->PORT,4);
 45e:	88 b3       	in	r24, 0x18	; 24
 460:	8f 7e       	andi	r24, 0xEF	; 239
 462:	88 bb       	out	0x18, r24	; 24
		break;
 464:	19 c0       	rjmp	.+50     	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
		case 8:
		CLR_Bit(DIO_PORTB->PORT,0);//0000 1000 : 0x08
 466:	88 b3       	in	r24, 0x18	; 24
 468:	8e 7f       	andi	r24, 0xFE	; 254
 46a:	88 bb       	out	0x18, r24	; 24
		CLR_Bit(DIO_PORTB->PORT,1);
 46c:	88 b3       	in	r24, 0x18	; 24
 46e:	8d 7f       	andi	r24, 0xFD	; 253
 470:	88 bb       	out	0x18, r24	; 24
		CLR_Bit(DIO_PORTB->PORT,2);
 472:	88 b3       	in	r24, 0x18	; 24
 474:	8b 7f       	andi	r24, 0xFB	; 251
 476:	88 bb       	out	0x18, r24	; 24
		SET_Bit(DIO_PORTB->PORT,4);
 478:	88 b3       	in	r24, 0x18	; 24
 47a:	80 61       	ori	r24, 0x10	; 16
 47c:	88 bb       	out	0x18, r24	; 24
		break;
 47e:	0c c0       	rjmp	.+24     	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
		case 9:
		SET_Bit(DIO_PORTB->PORT,0);//0000 1001 : 0x09
 480:	88 b3       	in	r24, 0x18	; 24
 482:	81 60       	ori	r24, 0x01	; 1
 484:	88 bb       	out	0x18, r24	; 24
		CLR_Bit(DIO_PORTB->PORT,1);
 486:	88 b3       	in	r24, 0x18	; 24
 488:	8d 7f       	andi	r24, 0xFD	; 253
 48a:	88 bb       	out	0x18, r24	; 24
		CLR_Bit(DIO_PORTB->PORT,2);
 48c:	88 b3       	in	r24, 0x18	; 24
 48e:	8b 7f       	andi	r24, 0xFB	; 251
 490:	88 bb       	out	0x18, r24	; 24
		SET_Bit(DIO_PORTB->PORT,4);
 492:	88 b3       	in	r24, 0x18	; 24
 494:	80 61       	ori	r24, 0x10	; 16
 496:	88 bb       	out	0x18, r24	; 24
 498:	8f e9       	ldi	r24, 0x9F	; 159
 49a:	9f e0       	ldi	r25, 0x0F	; 15
 49c:	01 97       	sbiw	r24, 0x01	; 1
 49e:	f1 f7       	brne	.-4      	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 4a2:	00 00       	nop
 4a4:	08 95       	ret

000004a6 <Display_Number>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void Display_Number(uint16 num)
{
 4a6:	ef 92       	push	r14
 4a8:	ff 92       	push	r15
 4aa:	0f 93       	push	r16
 4ac:	1f 93       	push	r17
 4ae:	cf 93       	push	r28
 4b0:	df 93       	push	r29
	if (num/10000 == 0)
 4b2:	80 31       	cpi	r24, 0x10	; 16
 4b4:	27 e2       	ldi	r18, 0x27	; 39
 4b6:	92 07       	cpc	r25, r18
 4b8:	08 f0       	brcs	.+2      	; 0x4bc <Display_Number+0x16>
 4ba:	81 c0       	rjmp	.+258    	; 0x5be <Display_Number+0x118>
 4bc:	ec 01       	movw	r28, r24
	{
		//SVN_Init();
		
		Select_Digit(1);
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	0e 94 9a 01 	call	0x334	; 0x334 <Select_Digit>
		Display_Digit((num%100)%10);
 4c4:	7e 01       	movw	r14, r28
 4c6:	f6 94       	lsr	r15
 4c8:	e7 94       	ror	r14
 4ca:	f6 94       	lsr	r15
 4cc:	e7 94       	ror	r14
 4ce:	97 01       	movw	r18, r14
 4d0:	ab e7       	ldi	r26, 0x7B	; 123
 4d2:	b4 e1       	ldi	r27, 0x14	; 20
 4d4:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__umulhisi3>
 4d8:	8c 01       	movw	r16, r24
 4da:	16 95       	lsr	r17
 4dc:	07 95       	ror	r16
 4de:	24 e6       	ldi	r18, 0x64	; 100
 4e0:	20 9f       	mul	r18, r16
 4e2:	c0 01       	movw	r24, r0
 4e4:	21 9f       	mul	r18, r17
 4e6:	90 0d       	add	r25, r0
 4e8:	11 24       	eor	r1, r1
 4ea:	8e 01       	movw	r16, r28
 4ec:	08 1b       	sub	r16, r24
 4ee:	19 0b       	sbc	r17, r25
 4f0:	98 01       	movw	r18, r16
 4f2:	ad ec       	ldi	r26, 0xCD	; 205
 4f4:	bc ec       	ldi	r27, 0xCC	; 204
 4f6:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__umulhisi3>
 4fa:	96 95       	lsr	r25
 4fc:	87 95       	ror	r24
 4fe:	96 95       	lsr	r25
 500:	87 95       	ror	r24
 502:	96 95       	lsr	r25
 504:	87 95       	ror	r24
 506:	9c 01       	movw	r18, r24
 508:	22 0f       	add	r18, r18
 50a:	33 1f       	adc	r19, r19
 50c:	88 0f       	add	r24, r24
 50e:	99 1f       	adc	r25, r25
 510:	88 0f       	add	r24, r24
 512:	99 1f       	adc	r25, r25
 514:	88 0f       	add	r24, r24
 516:	99 1f       	adc	r25, r25
 518:	82 0f       	add	r24, r18
 51a:	93 1f       	adc	r25, r19
 51c:	20 2f       	mov	r18, r16
 51e:	28 1b       	sub	r18, r24
 520:	82 2f       	mov	r24, r18
 522:	0e 94 c1 01 	call	0x382	; 0x382 <Display_Digit>
		
		Select_Digit(2);
 526:	82 e0       	ldi	r24, 0x02	; 2
 528:	0e 94 9a 01 	call	0x334	; 0x334 <Select_Digit>
		Display_Digit((num%100)/10);
 52c:	98 01       	movw	r18, r16
 52e:	ad ec       	ldi	r26, 0xCD	; 205
 530:	bc ec       	ldi	r27, 0xCC	; 204
 532:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__umulhisi3>
 536:	96 95       	lsr	r25
 538:	87 95       	ror	r24
 53a:	96 95       	lsr	r25
 53c:	87 95       	ror	r24
 53e:	96 95       	lsr	r25
 540:	87 95       	ror	r24
 542:	0e 94 c1 01 	call	0x382	; 0x382 <Display_Digit>
		
		Select_Digit(3);
 546:	83 e0       	ldi	r24, 0x03	; 3
 548:	0e 94 9a 01 	call	0x334	; 0x334 <Select_Digit>
		Display_Digit((num/100)%10);
 54c:	97 01       	movw	r18, r14
 54e:	ab e7       	ldi	r26, 0x7B	; 123
 550:	b4 e1       	ldi	r27, 0x14	; 20
 552:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__umulhisi3>
 556:	ac 01       	movw	r20, r24
 558:	56 95       	lsr	r21
 55a:	47 95       	ror	r20
 55c:	9a 01       	movw	r18, r20
 55e:	ad ec       	ldi	r26, 0xCD	; 205
 560:	bc ec       	ldi	r27, 0xCC	; 204
 562:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__umulhisi3>
 566:	96 95       	lsr	r25
 568:	87 95       	ror	r24
 56a:	96 95       	lsr	r25
 56c:	87 95       	ror	r24
 56e:	96 95       	lsr	r25
 570:	87 95       	ror	r24
 572:	9c 01       	movw	r18, r24
 574:	22 0f       	add	r18, r18
 576:	33 1f       	adc	r19, r19
 578:	88 0f       	add	r24, r24
 57a:	99 1f       	adc	r25, r25
 57c:	88 0f       	add	r24, r24
 57e:	99 1f       	adc	r25, r25
 580:	88 0f       	add	r24, r24
 582:	99 1f       	adc	r25, r25
 584:	82 0f       	add	r24, r18
 586:	93 1f       	adc	r25, r19
 588:	24 2f       	mov	r18, r20
 58a:	28 1b       	sub	r18, r24
 58c:	82 2f       	mov	r24, r18
 58e:	0e 94 c1 01 	call	0x382	; 0x382 <Display_Digit>
		
		Select_Digit(4);
 592:	84 e0       	ldi	r24, 0x04	; 4
 594:	0e 94 9a 01 	call	0x334	; 0x334 <Select_Digit>
		Display_Digit(num/1000);
 598:	9e 01       	movw	r18, r28
 59a:	36 95       	lsr	r19
 59c:	27 95       	ror	r18
 59e:	36 95       	lsr	r19
 5a0:	27 95       	ror	r18
 5a2:	36 95       	lsr	r19
 5a4:	27 95       	ror	r18
 5a6:	a5 ec       	ldi	r26, 0xC5	; 197
 5a8:	b0 e2       	ldi	r27, 0x20	; 32
 5aa:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__umulhisi3>
 5ae:	92 95       	swap	r25
 5b0:	82 95       	swap	r24
 5b2:	8f 70       	andi	r24, 0x0F	; 15
 5b4:	89 27       	eor	r24, r25
 5b6:	9f 70       	andi	r25, 0x0F	; 15
 5b8:	89 27       	eor	r24, r25
 5ba:	0e 94 c1 01 	call	0x382	; 0x382 <Display_Digit>
	}
}
 5be:	df 91       	pop	r29
 5c0:	cf 91       	pop	r28
 5c2:	1f 91       	pop	r17
 5c4:	0f 91       	pop	r16
 5c6:	ff 90       	pop	r15
 5c8:	ef 90       	pop	r14
 5ca:	08 95       	ret

000005cc <__tablejump2__>:
 5cc:	ee 0f       	add	r30, r30
 5ce:	ff 1f       	adc	r31, r31
 5d0:	05 90       	lpm	r0, Z+
 5d2:	f4 91       	lpm	r31, Z
 5d4:	e0 2d       	mov	r30, r0
 5d6:	09 94       	ijmp

000005d8 <__umulhisi3>:
 5d8:	a2 9f       	mul	r26, r18
 5da:	b0 01       	movw	r22, r0
 5dc:	b3 9f       	mul	r27, r19
 5de:	c0 01       	movw	r24, r0
 5e0:	a3 9f       	mul	r26, r19
 5e2:	70 0d       	add	r23, r0
 5e4:	81 1d       	adc	r24, r1
 5e6:	11 24       	eor	r1, r1
 5e8:	91 1d       	adc	r25, r1
 5ea:	b2 9f       	mul	r27, r18
 5ec:	70 0d       	add	r23, r0
 5ee:	81 1d       	adc	r24, r1
 5f0:	11 24       	eor	r1, r1
 5f2:	91 1d       	adc	r25, r1
 5f4:	08 95       	ret

000005f6 <_exit>:
 5f6:	f8 94       	cli

000005f8 <__stop_program>:
 5f8:	ff cf       	rjmp	.-2      	; 0x5f8 <__stop_program>
