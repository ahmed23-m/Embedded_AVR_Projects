
COTS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000042e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  0000042e  000004a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000004ca  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004fc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000130  00000000  00000000  00000538  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000122e  00000000  00000000  00000668  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a57  00000000  00000000  00001896  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000099b  00000000  00000000  000022ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001f0  00000000  00000000  00002c88  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000767  00000000  00000000  00002e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000904  00000000  00000000  000035df  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00003ee3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__vector_2>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e2       	ldi	r30, 0x2E	; 46
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 38       	cpi	r26, 0x88	; 136
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 15 02 	jmp	0x42a	; 0x42a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:



int main(void)
{
	PORT_Init();
  82:	0e 94 91 01 	call	0x322	; 0x322 <PORT_Init>
	IRQH_SetGlobalINT(INT_ENABLE);
  86:	81 e0       	ldi	r24, 0x01	; 1
  88:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <IRQH_SetGlobalINT>
	IRQH_SetExternalINT();
  8c:	0e 94 78 01 	call	0x2f0	; 0x2f0 <IRQH_SetExternalINT>
	//LCD_Init();
	KeyPad_Init();
  90:	0e 94 76 00 	call	0xec	; 0xec <KeyPad_Init>
	LED_Init(RED);
  94:	8f e0       	ldi	r24, 0x0F	; 15
  96:	0e 94 87 00 	call	0x10e	; 0x10e <LED_Init>
	LED_Init(BLUE);
  9a:	85 e0       	ldi	r24, 0x05	; 5
  9c:	0e 94 87 00 	call	0x10e	; 0x10e <LED_Init>
  a0:	ff cf       	rjmp	.-2      	; 0xa0 <main+0x1e>

000000a2 <__vector_2>:
		}*/
    }
}

ISR(INT1_vect)
{
  a2:	1f 92       	push	r1
  a4:	0f 92       	push	r0
  a6:	0f b6       	in	r0, 0x3f	; 63
  a8:	0f 92       	push	r0
  aa:	11 24       	eor	r1, r1
  ac:	2f 93       	push	r18
  ae:	3f 93       	push	r19
  b0:	4f 93       	push	r20
  b2:	5f 93       	push	r21
  b4:	6f 93       	push	r22
  b6:	7f 93       	push	r23
  b8:	8f 93       	push	r24
  ba:	9f 93       	push	r25
  bc:	af 93       	push	r26
  be:	bf 93       	push	r27
  c0:	ef 93       	push	r30
  c2:	ff 93       	push	r31
	LED_Toggle(RED);
  c4:	8f e0       	ldi	r24, 0x0F	; 15
  c6:	0e 94 a1 00 	call	0x142	; 0x142 <LED_Toggle>
  ca:	ff 91       	pop	r31
  cc:	ef 91       	pop	r30
  ce:	bf 91       	pop	r27
  d0:	af 91       	pop	r26
  d2:	9f 91       	pop	r25
  d4:	8f 91       	pop	r24
  d6:	7f 91       	pop	r23
  d8:	6f 91       	pop	r22
  da:	5f 91       	pop	r21
  dc:	4f 91       	pop	r20
  de:	3f 91       	pop	r19
  e0:	2f 91       	pop	r18
  e2:	0f 90       	pop	r0
  e4:	0f be       	out	0x3f, r0	; 63
  e6:	0f 90       	pop	r0
  e8:	1f 90       	pop	r1
  ea:	18 95       	reti

000000ec <KeyPad_Init>:
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK                                  
*******************************************************************************/
void KeyPad_Init(void)
{
	DIO_WriteChannel(KEYPAD_ROW_0 , PIN_HIGH);
  ec:	61 e0       	ldi	r22, 0x01	; 1
  ee:	85 e1       	ldi	r24, 0x15	; 21
  f0:	0e 94 a4 00 	call	0x148	; 0x148 <DIO_WriteChannel>
	DIO_WriteChannel(KEYPAD_ROW_1 , PIN_HIGH);
  f4:	61 e0       	ldi	r22, 0x01	; 1
  f6:	84 e1       	ldi	r24, 0x14	; 20
  f8:	0e 94 a4 00 	call	0x148	; 0x148 <DIO_WriteChannel>
	DIO_WriteChannel(KEYPAD_ROW_2 , PIN_HIGH);
  fc:	61 e0       	ldi	r22, 0x01	; 1
  fe:	83 e1       	ldi	r24, 0x13	; 19
 100:	0e 94 a4 00 	call	0x148	; 0x148 <DIO_WriteChannel>
	DIO_WriteChannel(KEYPAD_ROW_3 , PIN_HIGH);
 104:	61 e0       	ldi	r22, 0x01	; 1
 106:	82 e1       	ldi	r24, 0x12	; 18
 108:	0e 94 a4 00 	call	0x148	; 0x148 <DIO_WriteChannel>
 10c:	08 95       	ret

0000010e <LED_Init>:
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void LED_OFF(uint8 Color){
	
	DIO_WriteChannel(Color,PIN_LOW);
 10e:	85 30       	cpi	r24, 0x05	; 5
 110:	81 f0       	breq	.+32     	; 0x132 <LED_Init+0x24>
 112:	18 f4       	brcc	.+6      	; 0x11a <LED_Init+0xc>
 114:	84 30       	cpi	r24, 0x04	; 4
 116:	49 f0       	breq	.+18     	; 0x12a <LED_Init+0x1c>
 118:	08 95       	ret
 11a:	86 30       	cpi	r24, 0x06	; 6
 11c:	71 f0       	breq	.+28     	; 0x13a <LED_Init+0x2c>
 11e:	8f 30       	cpi	r24, 0x0F	; 15
 120:	79 f4       	brne	.+30     	; 0x140 <LED_Init+0x32>
 122:	87 b3       	in	r24, 0x17	; 23
 124:	80 68       	ori	r24, 0x80	; 128
 126:	87 bb       	out	0x17, r24	; 23
 128:	08 95       	ret
 12a:	8a b3       	in	r24, 0x1a	; 26
 12c:	80 61       	ori	r24, 0x10	; 16
 12e:	8a bb       	out	0x1a, r24	; 26
 130:	08 95       	ret
 132:	8a b3       	in	r24, 0x1a	; 26
 134:	80 62       	ori	r24, 0x20	; 32
 136:	8a bb       	out	0x1a, r24	; 26
 138:	08 95       	ret
 13a:	8a b3       	in	r24, 0x1a	; 26
 13c:	80 64       	ori	r24, 0x40	; 64
 13e:	8a bb       	out	0x1a, r24	; 26
 140:	08 95       	ret

00000142 <LED_Toggle>:
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void LED_Toggle(uint8 Color){
	
	DIO_FlipChannel(Color);
 142:	0e 94 2b 01 	call	0x256	; 0x256 <DIO_FlipChannel>
 146:	08 95       	ret

00000148 <DIO_WriteChannel>:
		break;
		case DIO_PORT_C :
		*Value = GET_Bit(DIO_PORTC->PIN , pin);
		break;
		case DIO_PORT_D :
		*Value = GET_Bit(DIO_PORTD->PIN , pin);
 148:	98 2f       	mov	r25, r24
 14a:	96 95       	lsr	r25
 14c:	96 95       	lsr	r25
 14e:	96 95       	lsr	r25
 150:	87 70       	andi	r24, 0x07	; 7
 152:	66 23       	and	r22, r22
 154:	09 f4       	brne	.+2      	; 0x158 <DIO_WriteChannel+0x10>
 156:	3f c0       	rjmp	.+126    	; 0x1d6 <DIO_WriteChannel+0x8e>
 158:	61 30       	cpi	r22, 0x01	; 1
 15a:	09 f0       	breq	.+2      	; 0x15e <DIO_WriteChannel+0x16>
 15c:	7b c0       	rjmp	.+246    	; 0x254 <DIO_WriteChannel+0x10c>
 15e:	91 30       	cpi	r25, 0x01	; 1
 160:	99 f0       	breq	.+38     	; 0x188 <DIO_WriteChannel+0x40>
 162:	28 f0       	brcs	.+10     	; 0x16e <DIO_WriteChannel+0x26>
 164:	92 30       	cpi	r25, 0x02	; 2
 166:	e9 f0       	breq	.+58     	; 0x1a2 <DIO_WriteChannel+0x5a>
 168:	93 30       	cpi	r25, 0x03	; 3
 16a:	41 f1       	breq	.+80     	; 0x1bc <DIO_WriteChannel+0x74>
 16c:	08 95       	ret
 16e:	4b b3       	in	r20, 0x1b	; 27
 170:	21 e0       	ldi	r18, 0x01	; 1
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	b9 01       	movw	r22, r18
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_WriteChannel+0x34>
 178:	66 0f       	add	r22, r22
 17a:	77 1f       	adc	r23, r23
 17c:	8a 95       	dec	r24
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_WriteChannel+0x30>
 180:	cb 01       	movw	r24, r22
 182:	84 2b       	or	r24, r20
 184:	8b bb       	out	0x1b, r24	; 27
 186:	08 95       	ret
 188:	48 b3       	in	r20, 0x18	; 24
 18a:	21 e0       	ldi	r18, 0x01	; 1
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	b9 01       	movw	r22, r18
 190:	02 c0       	rjmp	.+4      	; 0x196 <DIO_WriteChannel+0x4e>
 192:	66 0f       	add	r22, r22
 194:	77 1f       	adc	r23, r23
 196:	8a 95       	dec	r24
 198:	e2 f7       	brpl	.-8      	; 0x192 <DIO_WriteChannel+0x4a>
 19a:	cb 01       	movw	r24, r22
 19c:	84 2b       	or	r24, r20
 19e:	88 bb       	out	0x18, r24	; 24
 1a0:	08 95       	ret
 1a2:	45 b3       	in	r20, 0x15	; 21
 1a4:	21 e0       	ldi	r18, 0x01	; 1
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	b9 01       	movw	r22, r18
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_WriteChannel+0x68>
 1ac:	66 0f       	add	r22, r22
 1ae:	77 1f       	adc	r23, r23
 1b0:	8a 95       	dec	r24
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_WriteChannel+0x64>
 1b4:	cb 01       	movw	r24, r22
 1b6:	84 2b       	or	r24, r20
 1b8:	85 bb       	out	0x15, r24	; 21
 1ba:	08 95       	ret
 1bc:	42 b3       	in	r20, 0x12	; 18
 1be:	21 e0       	ldi	r18, 0x01	; 1
 1c0:	30 e0       	ldi	r19, 0x00	; 0
 1c2:	b9 01       	movw	r22, r18
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_WriteChannel+0x82>
 1c6:	66 0f       	add	r22, r22
 1c8:	77 1f       	adc	r23, r23
 1ca:	8a 95       	dec	r24
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_WriteChannel+0x7e>
 1ce:	cb 01       	movw	r24, r22
 1d0:	84 2b       	or	r24, r20
 1d2:	82 bb       	out	0x12, r24	; 18
 1d4:	08 95       	ret
 1d6:	91 30       	cpi	r25, 0x01	; 1
 1d8:	a1 f0       	breq	.+40     	; 0x202 <DIO_WriteChannel+0xba>
 1da:	28 f0       	brcs	.+10     	; 0x1e6 <DIO_WriteChannel+0x9e>
 1dc:	92 30       	cpi	r25, 0x02	; 2
 1de:	f9 f0       	breq	.+62     	; 0x21e <DIO_WriteChannel+0xd6>
 1e0:	93 30       	cpi	r25, 0x03	; 3
 1e2:	59 f1       	breq	.+86     	; 0x23a <DIO_WriteChannel+0xf2>
 1e4:	08 95       	ret
 1e6:	4b b3       	in	r20, 0x1b	; 27
 1e8:	21 e0       	ldi	r18, 0x01	; 1
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	b9 01       	movw	r22, r18
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <DIO_WriteChannel+0xac>
 1f0:	66 0f       	add	r22, r22
 1f2:	77 1f       	adc	r23, r23
 1f4:	8a 95       	dec	r24
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <DIO_WriteChannel+0xa8>
 1f8:	cb 01       	movw	r24, r22
 1fa:	80 95       	com	r24
 1fc:	84 23       	and	r24, r20
 1fe:	8b bb       	out	0x1b, r24	; 27
 200:	08 95       	ret
 202:	48 b3       	in	r20, 0x18	; 24
 204:	21 e0       	ldi	r18, 0x01	; 1
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	b9 01       	movw	r22, r18
 20a:	02 c0       	rjmp	.+4      	; 0x210 <DIO_WriteChannel+0xc8>
 20c:	66 0f       	add	r22, r22
 20e:	77 1f       	adc	r23, r23
 210:	8a 95       	dec	r24
 212:	e2 f7       	brpl	.-8      	; 0x20c <DIO_WriteChannel+0xc4>
 214:	cb 01       	movw	r24, r22
 216:	80 95       	com	r24
 218:	84 23       	and	r24, r20
 21a:	88 bb       	out	0x18, r24	; 24
 21c:	08 95       	ret
 21e:	45 b3       	in	r20, 0x15	; 21
 220:	21 e0       	ldi	r18, 0x01	; 1
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	b9 01       	movw	r22, r18
 226:	02 c0       	rjmp	.+4      	; 0x22c <DIO_WriteChannel+0xe4>
 228:	66 0f       	add	r22, r22
 22a:	77 1f       	adc	r23, r23
 22c:	8a 95       	dec	r24
 22e:	e2 f7       	brpl	.-8      	; 0x228 <DIO_WriteChannel+0xe0>
 230:	cb 01       	movw	r24, r22
 232:	80 95       	com	r24
 234:	84 23       	and	r24, r20
 236:	85 bb       	out	0x15, r24	; 21
 238:	08 95       	ret
 23a:	42 b3       	in	r20, 0x12	; 18
 23c:	21 e0       	ldi	r18, 0x01	; 1
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	b9 01       	movw	r22, r18
 242:	02 c0       	rjmp	.+4      	; 0x248 <DIO_WriteChannel+0x100>
 244:	66 0f       	add	r22, r22
 246:	77 1f       	adc	r23, r23
 248:	8a 95       	dec	r24
 24a:	e2 f7       	brpl	.-8      	; 0x244 <DIO_WriteChannel+0xfc>
 24c:	cb 01       	movw	r24, r22
 24e:	80 95       	com	r24
 250:	84 23       	and	r24, r20
 252:	82 bb       	out	0x12, r24	; 18
 254:	08 95       	ret

00000256 <DIO_FlipChannel>:
*******************************************************************************/
void DIO_FlipChannel(uint8 pin_number)
{
	uint8 port = 0 , pin = 0;
	
	port = pin_number / DIO_TOTAL_PORT_PINS;
 256:	98 2f       	mov	r25, r24
 258:	96 95       	lsr	r25
 25a:	96 95       	lsr	r25
 25c:	96 95       	lsr	r25
	pin = pin_number % DIO_TOTAL_PORT_PINS;
 25e:	87 70       	andi	r24, 0x07	; 7

	switch(port)
 260:	91 30       	cpi	r25, 0x01	; 1
 262:	99 f0       	breq	.+38     	; 0x28a <DIO_FlipChannel+0x34>
 264:	28 f0       	brcs	.+10     	; 0x270 <DIO_FlipChannel+0x1a>
 266:	92 30       	cpi	r25, 0x02	; 2
 268:	e9 f0       	breq	.+58     	; 0x2a4 <DIO_FlipChannel+0x4e>
 26a:	93 30       	cpi	r25, 0x03	; 3
 26c:	41 f1       	breq	.+80     	; 0x2be <DIO_FlipChannel+0x68>
 26e:	08 95       	ret
	{
		case DIO_PORT_A :
		TOGGLE_Bit(DIO_PORTA->PORT , pin);
 270:	4b b3       	in	r20, 0x1b	; 27
 272:	21 e0       	ldi	r18, 0x01	; 1
 274:	30 e0       	ldi	r19, 0x00	; 0
 276:	b9 01       	movw	r22, r18
 278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_FlipChannel+0x28>
 27a:	66 0f       	add	r22, r22
 27c:	77 1f       	adc	r23, r23
 27e:	8a 95       	dec	r24
 280:	e2 f7       	brpl	.-8      	; 0x27a <DIO_FlipChannel+0x24>
 282:	cb 01       	movw	r24, r22
 284:	84 27       	eor	r24, r20
 286:	8b bb       	out	0x1b, r24	; 27
		break;
 288:	08 95       	ret
		case DIO_PORT_B :
		TOGGLE_Bit(DIO_PORTB->PORT , pin);
 28a:	48 b3       	in	r20, 0x18	; 24
 28c:	21 e0       	ldi	r18, 0x01	; 1
 28e:	30 e0       	ldi	r19, 0x00	; 0
 290:	b9 01       	movw	r22, r18
 292:	02 c0       	rjmp	.+4      	; 0x298 <DIO_FlipChannel+0x42>
 294:	66 0f       	add	r22, r22
 296:	77 1f       	adc	r23, r23
 298:	8a 95       	dec	r24
 29a:	e2 f7       	brpl	.-8      	; 0x294 <DIO_FlipChannel+0x3e>
 29c:	cb 01       	movw	r24, r22
 29e:	84 27       	eor	r24, r20
 2a0:	88 bb       	out	0x18, r24	; 24
		break;
 2a2:	08 95       	ret
		case DIO_PORT_C :
		TOGGLE_Bit(DIO_PORTC->PORT , pin);
 2a4:	45 b3       	in	r20, 0x15	; 21
 2a6:	21 e0       	ldi	r18, 0x01	; 1
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	b9 01       	movw	r22, r18
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <DIO_FlipChannel+0x5c>
 2ae:	66 0f       	add	r22, r22
 2b0:	77 1f       	adc	r23, r23
 2b2:	8a 95       	dec	r24
 2b4:	e2 f7       	brpl	.-8      	; 0x2ae <DIO_FlipChannel+0x58>
 2b6:	cb 01       	movw	r24, r22
 2b8:	84 27       	eor	r24, r20
 2ba:	85 bb       	out	0x15, r24	; 21
		break;
 2bc:	08 95       	ret
		case DIO_PORT_D :
		TOGGLE_Bit(DIO_PORTD->PORT , pin);
 2be:	42 b3       	in	r20, 0x12	; 18
 2c0:	21 e0       	ldi	r18, 0x01	; 1
 2c2:	30 e0       	ldi	r19, 0x00	; 0
 2c4:	b9 01       	movw	r22, r18
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <DIO_FlipChannel+0x76>
 2c8:	66 0f       	add	r22, r22
 2ca:	77 1f       	adc	r23, r23
 2cc:	8a 95       	dec	r24
 2ce:	e2 f7       	brpl	.-8      	; 0x2c8 <DIO_FlipChannel+0x72>
 2d0:	cb 01       	movw	r24, r22
 2d2:	84 27       	eor	r24, r20
 2d4:	82 bb       	out	0x12, r24	; 18
 2d6:	08 95       	ret

000002d8 <IRQH_SetGlobalINT>:
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK                                  
*******************************************************************************/
void IRQH_SetGlobalINT(uint8 GlobalINTStatus)
{
	switch(GlobalINTStatus)
 2d8:	88 23       	and	r24, r24
 2da:	31 f0       	breq	.+12     	; 0x2e8 <IRQH_SetGlobalINT+0x10>
 2dc:	81 30       	cpi	r24, 0x01	; 1
 2de:	39 f4       	brne	.+14     	; 0x2ee <IRQH_SetGlobalINT+0x16>
	{
		case INT_ENABLE:
			SET_Bit(SREG, 7);
 2e0:	8f b7       	in	r24, 0x3f	; 63
 2e2:	80 68       	ori	r24, 0x80	; 128
 2e4:	8f bf       	out	0x3f, r24	; 63
		break;
 2e6:	08 95       	ret
		
		case INT_DISABLE:
			CLR_Bit(SREG, 7);
 2e8:	8f b7       	in	r24, 0x3f	; 63
 2ea:	8f 77       	andi	r24, 0x7F	; 127
 2ec:	8f bf       	out	0x3f, r24	; 63
 2ee:	08 95       	ret

000002f0 <IRQH_SetExternalINT>:
void IRQH_SetExternalINT(void)
{
	#if (EXT_INT_0 == INT_ENABLE)
	
		//Enable EXT_INT0
		SET_Bit(GISR, 6);
 2f0:	8b b7       	in	r24, 0x3b	; 59
 2f2:	80 64       	ori	r24, 0x40	; 64
 2f4:	8b bf       	out	0x3b, r24	; 59
		
		#if (EXT_INT0_TRIGGER == EXT_INT_TRIGGER_FALLING_EDGE)
			CLR_Bit(MCUCR, 0);
 2f6:	85 b7       	in	r24, 0x35	; 53
 2f8:	8e 7f       	andi	r24, 0xFE	; 254
 2fa:	85 bf       	out	0x35, r24	; 53
			CLR_Bit(MCUCR, 1);
 2fc:	85 b7       	in	r24, 0x35	; 53
 2fe:	8d 7f       	andi	r24, 0xFD	; 253
 300:	85 bf       	out	0x35, r24	; 53
	#endif /*if (EXT_INT_0 == INT_ENABLE)*/
	
	#if (EXT_INT_1 == INT_ENABLE)
	
		//Enable EXT_INT1
		SET_Bit(GISR, 7);
 302:	8b b7       	in	r24, 0x3b	; 59
 304:	80 68       	ori	r24, 0x80	; 128
 306:	8b bf       	out	0x3b, r24	; 59
	
		#if (EXT_INT1_TRIGGER == EXT_INT_TRIGGER_FALLING_EDGE)
			CLR_Bit(MCUCR, 2);
 308:	85 b7       	in	r24, 0x35	; 53
 30a:	8b 7f       	andi	r24, 0xFB	; 251
 30c:	85 bf       	out	0x35, r24	; 53
			CLR_Bit(MCUCR, 3);
 30e:	85 b7       	in	r24, 0x35	; 53
 310:	87 7f       	andi	r24, 0xF7	; 247
 312:	85 bf       	out	0x35, r24	; 53
	#endif /*if (EXT_INT_1 == INT_ENABLE)*/
	
	#if (EXT_INT_2 == INT_ENABLE)
	
		//Enable EXT_INT2
		SET_Bit(GISR, 5);
 314:	8b b7       	in	r24, 0x3b	; 59
 316:	80 62       	ori	r24, 0x20	; 32
 318:	8b bf       	out	0x3b, r24	; 59
		
		#if (EXT_INT2_TRIGGER == EXT_INT_TRIGGER_FALLING_EDGE)
			CLR_Bit(MCUSCR, 6);
 31a:	84 b7       	in	r24, 0x34	; 52
 31c:	8f 7b       	andi	r24, 0xBF	; 191
 31e:	84 bf       	out	0x34, r24	; 52
 320:	08 95       	ret

00000322 <PORT_Init>:
*******************************************************************************/
void PORT_Init(void)
{
	uint8 Loop_counter = 0,	PORT = 0,	PIN = 0,	Dir = 0;
	
	for(Loop_counter = 0; Loop_counter<DEFINED_PINS; Loop_counter++)
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	7e c0       	rjmp	.+252    	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
	{
		PORT = PORT_Init_Pins[Loop_counter].PIN_Order / Number_PORT_PINS;
 326:	e9 2f       	mov	r30, r25
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	ee 0f       	add	r30, r30
 32c:	ff 1f       	adc	r31, r31
 32e:	e0 5a       	subi	r30, 0xA0	; 160
 330:	ff 4f       	sbci	r31, 0xFF	; 255
 332:	80 81       	ld	r24, Z
 334:	28 2f       	mov	r18, r24
 336:	26 95       	lsr	r18
 338:	26 95       	lsr	r18
 33a:	26 95       	lsr	r18
		PIN  = PORT_Init_Pins[Loop_counter].PIN_Order % Number_PORT_PINS;
 33c:	87 70       	andi	r24, 0x07	; 7
		Dir  = PORT_Init_Pins[Loop_counter].PIN_Dir;
 33e:	31 81       	ldd	r19, Z+1	; 0x01
		
		switch(Dir)
 340:	33 23       	and	r19, r19
 342:	b9 f1       	breq	.+110    	; 0x3b2 <PORT_Init+0x90>
 344:	31 30       	cpi	r19, 0x01	; 1
 346:	09 f0       	breq	.+2      	; 0x34a <PORT_Init+0x28>
 348:	6b c0       	rjmp	.+214    	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
		{
			case PIN_OUTPUT:
			{	
				switch(PORT)
 34a:	21 30       	cpi	r18, 0x01	; 1
 34c:	89 f0       	breq	.+34     	; 0x370 <PORT_Init+0x4e>
 34e:	28 f0       	brcs	.+10     	; 0x35a <PORT_Init+0x38>
 350:	22 30       	cpi	r18, 0x02	; 2
 352:	c9 f0       	breq	.+50     	; 0x386 <PORT_Init+0x64>
 354:	23 30       	cpi	r18, 0x03	; 3
 356:	11 f1       	breq	.+68     	; 0x39c <PORT_Init+0x7a>
 358:	63 c0       	rjmp	.+198    	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
				{
					case PORT_A:
						SET_Bit(DIO_PORTA->DDR,PIN);
 35a:	4a b3       	in	r20, 0x1a	; 26
 35c:	21 e0       	ldi	r18, 0x01	; 1
 35e:	30 e0       	ldi	r19, 0x00	; 0
 360:	02 c0       	rjmp	.+4      	; 0x366 <PORT_Init+0x44>
 362:	22 0f       	add	r18, r18
 364:	33 1f       	adc	r19, r19
 366:	8a 95       	dec	r24
 368:	e2 f7       	brpl	.-8      	; 0x362 <PORT_Init+0x40>
 36a:	24 2b       	or	r18, r20
 36c:	2a bb       	out	0x1a, r18	; 26
						break;
 36e:	58 c0       	rjmp	.+176    	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
					case PORT_B:
						SET_Bit(DIO_PORTB->DDR,PIN);
 370:	47 b3       	in	r20, 0x17	; 23
 372:	21 e0       	ldi	r18, 0x01	; 1
 374:	30 e0       	ldi	r19, 0x00	; 0
 376:	02 c0       	rjmp	.+4      	; 0x37c <PORT_Init+0x5a>
 378:	22 0f       	add	r18, r18
 37a:	33 1f       	adc	r19, r19
 37c:	8a 95       	dec	r24
 37e:	e2 f7       	brpl	.-8      	; 0x378 <PORT_Init+0x56>
 380:	24 2b       	or	r18, r20
 382:	27 bb       	out	0x17, r18	; 23
						break;
 384:	4d c0       	rjmp	.+154    	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
					case PORT_C:
						SET_Bit(DIO_PORTC->DDR,PIN);
 386:	44 b3       	in	r20, 0x14	; 20
 388:	21 e0       	ldi	r18, 0x01	; 1
 38a:	30 e0       	ldi	r19, 0x00	; 0
 38c:	02 c0       	rjmp	.+4      	; 0x392 <PORT_Init+0x70>
 38e:	22 0f       	add	r18, r18
 390:	33 1f       	adc	r19, r19
 392:	8a 95       	dec	r24
 394:	e2 f7       	brpl	.-8      	; 0x38e <PORT_Init+0x6c>
 396:	24 2b       	or	r18, r20
 398:	24 bb       	out	0x14, r18	; 20
						break;
 39a:	42 c0       	rjmp	.+132    	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
					case PORT_D:
						SET_Bit(DIO_PORTD->DDR,PIN);
 39c:	41 b3       	in	r20, 0x11	; 17
 39e:	21 e0       	ldi	r18, 0x01	; 1
 3a0:	30 e0       	ldi	r19, 0x00	; 0
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <PORT_Init+0x86>
 3a4:	22 0f       	add	r18, r18
 3a6:	33 1f       	adc	r19, r19
 3a8:	8a 95       	dec	r24
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <PORT_Init+0x82>
 3ac:	24 2b       	or	r18, r20
 3ae:	21 bb       	out	0x11, r18	; 17
						break;
 3b0:	37 c0       	rjmp	.+110    	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
				}
			}
			break;
			case PIN_INPUT:
			{
				switch(PORT)
 3b2:	21 30       	cpi	r18, 0x01	; 1
 3b4:	91 f0       	breq	.+36     	; 0x3da <PORT_Init+0xb8>
 3b6:	28 f0       	brcs	.+10     	; 0x3c2 <PORT_Init+0xa0>
 3b8:	22 30       	cpi	r18, 0x02	; 2
 3ba:	d9 f0       	breq	.+54     	; 0x3f2 <PORT_Init+0xd0>
 3bc:	23 30       	cpi	r18, 0x03	; 3
 3be:	29 f1       	breq	.+74     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 3c0:	2f c0       	rjmp	.+94     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
				{
					case PORT_A:
						CLR_Bit(DIO_PORTA->DDR,PIN);
 3c2:	4a b3       	in	r20, 0x1a	; 26
 3c4:	21 e0       	ldi	r18, 0x01	; 1
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <PORT_Init+0xac>
 3ca:	22 0f       	add	r18, r18
 3cc:	33 1f       	adc	r19, r19
 3ce:	8a 95       	dec	r24
 3d0:	e2 f7       	brpl	.-8      	; 0x3ca <PORT_Init+0xa8>
 3d2:	20 95       	com	r18
 3d4:	24 23       	and	r18, r20
 3d6:	2a bb       	out	0x1a, r18	; 26
						break;
 3d8:	23 c0       	rjmp	.+70     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
					case PORT_B:
						CLR_Bit(DIO_PORTB->DDR,PIN);
 3da:	47 b3       	in	r20, 0x17	; 23
 3dc:	21 e0       	ldi	r18, 0x01	; 1
 3de:	30 e0       	ldi	r19, 0x00	; 0
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <PORT_Init+0xc4>
 3e2:	22 0f       	add	r18, r18
 3e4:	33 1f       	adc	r19, r19
 3e6:	8a 95       	dec	r24
 3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <PORT_Init+0xc0>
 3ea:	20 95       	com	r18
 3ec:	24 23       	and	r18, r20
 3ee:	27 bb       	out	0x17, r18	; 23
						break;
 3f0:	17 c0       	rjmp	.+46     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
					case PORT_C:
						CLR_Bit(DIO_PORTC->DDR,PIN);
 3f2:	44 b3       	in	r20, 0x14	; 20
 3f4:	21 e0       	ldi	r18, 0x01	; 1
 3f6:	30 e0       	ldi	r19, 0x00	; 0
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <PORT_Init+0xdc>
 3fa:	22 0f       	add	r18, r18
 3fc:	33 1f       	adc	r19, r19
 3fe:	8a 95       	dec	r24
 400:	e2 f7       	brpl	.-8      	; 0x3fa <PORT_Init+0xd8>
 402:	20 95       	com	r18
 404:	24 23       	and	r18, r20
 406:	24 bb       	out	0x14, r18	; 20
						break;
 408:	0b c0       	rjmp	.+22     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
					case PORT_D:
						CLR_Bit(DIO_PORTD->DDR,PIN);
 40a:	41 b3       	in	r20, 0x11	; 17
 40c:	21 e0       	ldi	r18, 0x01	; 1
 40e:	30 e0       	ldi	r19, 0x00	; 0
 410:	02 c0       	rjmp	.+4      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 412:	22 0f       	add	r18, r18
 414:	33 1f       	adc	r19, r19
 416:	8a 95       	dec	r24
 418:	e2 f7       	brpl	.-8      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 41a:	20 95       	com	r18
 41c:	24 23       	and	r18, r20
 41e:	21 bb       	out	0x11, r18	; 17
*******************************************************************************/
void PORT_Init(void)
{
	uint8 Loop_counter = 0,	PORT = 0,	PIN = 0,	Dir = 0;
	
	for(Loop_counter = 0; Loop_counter<DEFINED_PINS; Loop_counter++)
 420:	9f 5f       	subi	r25, 0xFF	; 255
 422:	94 31       	cpi	r25, 0x14	; 20
 424:	08 f4       	brcc	.+2      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 426:	7f cf       	rjmp	.-258    	; 0x326 <PORT_Init+0x4>
			
			default:
			break;
		}
	}
}
 428:	08 95       	ret

0000042a <_exit>:
 42a:	f8 94       	cli

0000042c <__stop_program>:
 42c:	ff cf       	rjmp	.-2      	; 0x42c <__stop_program>
